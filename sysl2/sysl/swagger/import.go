package swagger

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"sort"
	"strings"

	"github.com/sirupsen/logrus"

	"github.com/go-openapi/spec"

	"github.com/go-openapi/loads"
)

type OutputData struct {
	AppName string
	Package string
}

func LoadSwaggerText(args OutputData, text string, logger *logrus.Logger) (out string, err error) {

	doc, err := loads.Analyzed(json.RawMessage(text), "2.0")
	if err != nil {
		logger.Errorf("Failed to load swagger spec: %s\n", err.Error())
		return "", err
	}

	result := &bytes.Buffer{}

	swagger := doc.Spec()
	types := InitTypes(swagger, logger)
	globalParams := buildGlobalParams(swagger.Parameters, types, logger)

	si := swaggerImporter{
		Writer:       result,
		ind:          NewIndentWriter("    ", result),
		swagger:      doc.Spec(),
		logger:       logger,
		args:         args,
		types:        types,
		endpoints:    InitEndpoints(swagger, types, globalParams, logger),
		globalParams: globalParams,
	}
	if err := si.Write(); err != nil {
		return "", err
	}

	return result.String(), nil
}

type swaggerImporter struct {
	io.Writer
	ind     *IndentWriter
	swagger *spec.Swagger
	logger  *logrus.Logger
	args    OutputData

	types        TypeList
	endpoints    map[string][]Endpoint
	globalParams Parameters
}

func (si *swaggerImporter) mustWrite(s string) {
	if _, err := si.Writer.Write([]byte(s)); err != nil {
		si.logger.Fatalf("failed to complete write: %s", err.Error())
	}
}

const PushIndent = "&& >>"
const PopIndent = "&& <<"
const BlankLine = "&& !!"

func (si *swaggerImporter) writeLines(lines ...string) {
	for _, l := range lines {
		switch l {
		case PushIndent:
			si.ind.Push()
		case PopIndent:
			si.ind.Pop()
		case BlankLine:
			si.mustWrite("\n")
		default:
			_ = si.ind.Write() // nolint: errcheck
			si.mustWrite(l + "\n")
		}
	}
}

func (si *swaggerImporter) Write() error {

	if err := si.writeHeader(); err != nil {
		return err
	}

	if si.swagger.Info != nil {
		if err := si.writeInfo(); err != nil {
			return err
		}
	}

	if si.swagger.BasePath != "" {
		si.writeLines(fmt.Sprintf("%s:", si.swagger.BasePath), PushIndent, BlankLine)
	}
	for _, method := range methodDisplayOrder {
		for _, endpoint := range si.endpoints[method] {
			si.writeEndpoint(method, endpoint)
			si.writeLines(BlankLine)
		}
	}
	if si.swagger.BasePath != "" {
		si.writeLines(PopIndent)
	}

	si.writeLines("#" + strings.Repeat("-", 75))
	si.writeLines("# definitions")
	for _, t := range si.types {
		if !isExternalAlias(t) {
			si.writeLines(BlankLine)
			si.writeDefinition(t)
		}
	}
	for _, t := range si.types {
		if isExternalAlias(t) {
			si.writeLines(BlankLine)
			si.writeExternalAlias(t)
		}
	}

	return nil
}

func (si *swaggerImporter) writeInfo() error {

	desc := ""
	if info := si.swagger.Info; info != nil {
		desc = getDescription(info.Description)
		values := []string{
			"version", info.Version,
			"host", si.swagger.Host,
			"license", "",
			"termsOfService", info.TermsOfService}
		for i := 0; i < len(values); i += 2 {
			key := values[i]
			val := values[i+1]
			if val != "" {
				si.writeLines(fmt.Sprintf("@%s = %s", key, quote(val)))
			}
		}
	}
	si.writeLines("@description =:", PushIndent, "| "+getDescription(desc), PopIndent, BlankLine)
	return nil
}

func getDescription(d string) string {
	if d == "" {
		return "No description."
	}
	return d
}

func quote(s string) string {
	return `"` + s + `"`
}

func (si *swaggerImporter) writeHeader() error {

	si.mustWrite(`##########################################
##                                      ##
##  AUTOGENERATED CODE -- DO NOT EDIT!  ##
##                                      ##
##########################################

`)
	title := ""
	if si.swagger.Info != nil {
		title = si.swagger.Info.Title
	}

	si.writeLines(fmt.Sprintf("%s %s [package=%s]:", si.args.AppName, quote(title), quote(si.args.Package)))
	si.ind.Push()

	return nil
}

func buildQueryString(params []Param) string {
	query := ""
	if len(params) > 0 {
		var parts []string
		for _, p := range params {
			optional := ""
			if p.Optional {
				optional = "?"
			}
			parts = append(parts, fmt.Sprintf("%s=%s%s", p.Name, p.Type.Name, optional))
		}
		query = " ?" + strings.Join(parts, "&")
	}
	return query
}

func buildRequestBodyString(params []Param) string {
	body := ""
	if len(params) > 0 {
		sort.SliceStable(params, func(i, j int) bool {
			return strings.Compare(params[i].Name, params[j].Name) < 0
		})
		var parts []string
		for _, p := range params {
			parts = append(parts, fmt.Sprintf("%s <: %s [~body]", p.Name, p.Type.Name))
		}
		body = strings.Join(parts, ", ")
	}
	return body
}

func buildRequestHeadersString(params []Param) string {
	headers := ""
	if len(params) > 0 {
		var parts []string
		for _, p := range params {
			optional := map[bool]string{true: "~optional", false: "~required"}[p.Optional]

			safeName := strings.ToLower(strings.ReplaceAll(p.Name, "-", "_"))

			parts = append(parts, fmt.Sprintf("%s <: %s [~header, %s, name=%s]", safeName, p.Type.Name, optional, quote(p.Name)))
		}
		headers = strings.Join(parts, ", ")
	}
	return headers
}

func buildPathString(path string, params []Param) string {

	result := path

	for _, p := range params {
		replacement := fmt.Sprintf("{%s<:%s}", p.Name, p.Type.Name)
		result = strings.ReplaceAll(result, fmt.Sprintf("{%s}", p.Name), replacement)
	}

	return result
}

func (si *swaggerImporter) writeEndpoint(method string, endpoint Endpoint) {

	header := buildRequestHeadersString(endpoint.Params.HeaderParams())
	body := buildRequestBodyString(endpoint.Params.BodyParams())
	reqStr := ""
	if len(header) > 0 && len(body) > 0 {
		reqStr = fmt.Sprintf(" (%s)", strings.Join([]string{body, header}, ", "))
	} else if len(header) > 0 || len(body) > 0 {
		reqStr = fmt.Sprintf(" (%s)", body+header)
	}

	pathStr := buildPathString(endpoint.Path, endpoint.Params.PathParams())

	si.writeLines(fmt.Sprintf("%s:", pathStr), PushIndent,
		fmt.Sprintf("%s%s%s:", method, reqStr, buildQueryString(endpoint.Params.QueryParams())), PushIndent,
		fmt.Sprintf("| %s", getDescription(endpoint.Description)))

	if endpoint.Responses != nil {
		var outs []string
		for statusCode, response := range endpoint.Responses.StatusCodeResponses {
			if schema := response.Schema; schema != nil {
				outs = append(outs, findReferencedType(*schema, si.logger))
			} else {
				outs = append(outs, fmt.Sprintf("%d", statusCode))
			}

		}
		if endpoint.Responses.Extensions != nil {
			si.logger.Warnf("x-* responses not implemented, endpoint: %s", endpoint.Path)
			for key := range endpoint.Responses.Extensions {
				outs = append(outs, key)
			}
		}
		if endpoint.Responses.Default != nil {
			si.logger.Warnf("default responses not implemented, endpoint: %s", endpoint.Path)
			outs = append(outs, "default")
		}
		sort.Strings(outs)
		si.writeLines(fmt.Sprintf("return %s", strings.Join(outs, ", ")))
	}

	si.writeLines(PopIndent, PopIndent)
}

func (si *swaggerImporter) writeDefinition(t Type) {

	bangName := "type"
	if t.isAlias {
		bangName = "alias"

		if t.isArray {
			si.writeLines(fmt.Sprintf("!%s %s:", bangName, t.Name),
				PushIndent, getSyslTypeName(t), PopIndent)
			return
		} else if t.isEnum {
			si.writeLines(fmt.Sprintf("!%s %s:", bangName, t.Name),
				PushIndent, "string", PopIndent)
			return
		}
	}
	si.writeLines(fmt.Sprintf("!%s %s:", bangName, t.Name))
	for _, prop := range t.Properties {
		suffix := ""
		if prop.Optional {
			suffix = "?"
		}

		name := prop.Name
		if IsKeyword(name) {
			name += "_"
		}

		si.writeLines(PushIndent, fmt.Sprintf("%s <: %s%s:", name, getSyslTypeName(prop.Type), suffix))
		si.writeLines(PushIndent, fmt.Sprintf("@json_tag = %s", quote(prop.Name)))
		si.writeLines(PopIndent, PopIndent)
	}
}

func isExternalAlias(t Type) bool {
	return t.isAlias && !t.isArray && !t.isEnum
}

func (si *swaggerImporter) writeExternalAlias(t Type) {
	aliasType := "string"
	if len(t.Properties) > 0 {
		aliasType = getSyslTypeName(t.Properties[0].Type)
	}
	si.writeLines(fmt.Sprintf("!alias %s:", getSyslTypeName(t)),
		PushIndent, aliasType, PopIndent)
}

func getSyslTypeName(t Type) string {
	if isExternalAlias(t) {
		return "EXTERNAL_" + t.Name
	} else if t.isArray {
		return "sequence of " + getSyslTypeName(t.Properties[0].Type)
	}
	return t.Name
}
