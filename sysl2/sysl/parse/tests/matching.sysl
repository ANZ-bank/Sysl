TransformationTest[package="io.sysl.test.views"]:
  !view TestMatching(number <: int) -> int:
    number -> (:
      let out = ~~> foo1
      let out1 = . ~> foo1
      let out2 = abc ~> foo1
      let out3 = .abc ~> foo1
      let out4 = .abc ~> .def
      let out5 = .abc ~> .table of abc
      let out6 = .abc ~> -> foo
      let out7 = .abc ~[abc]> foo
      let out7a = .abc ~[abc,def]> foo
      let out7b = .abc !~[abc,def]> foo
      let out8 = .abc !~[abc,def]> foo.def
      let out8b = .abc !~[abc,def]> .foo.def
      let out9 = .abc !~[abc,def]> .foo.def where(true)
      let out9 = .abc !~[abc,def]> .foo.def single
      let out9 = .abc !~[abc,def]> .foo.def singleOrNull
      let out10 = if:
        a == true => . ~> foo
      let out11 = rankedSecurityDetailsSet ~[securityDetailsId]> (input.table of SecurityDetails)
    )
