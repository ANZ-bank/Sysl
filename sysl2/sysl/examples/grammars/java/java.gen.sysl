CodeGenTransform:
  !view JavaType(t <: sysl.Type) -> string:
    t -> (:
      out = if t.type ==:
        "primitive" => if t.primitive ==:
          "DECIMAL" => "BigDecimal"
          "INT" => "int"
          "STRING" => "String"
        else t.type_ref
    )

  !view PrivateFields(fields <: set of app.Type) -> set of memberFunction:
    fields -> (field:
      access = "private"
      typeName = JavaType(field.value).out
      fieldName = field.key
    )

  !view Getters(fields <: set of app.Type) -> set of memberFunction:
    fields -> (field:
      access = "public"
      returnType = JavaType(field.value).out
      methodName = "get" + field.key
      methodBody = field -> <methodBody> (:
        statement = {field} -> <statement> (:
          returnStatement = field ->  <returnStatement> (:
            returnPayload = .key
          )
        )
      )
    )

  # fields is actually: map of types
  # field is map having two entries
  # key = fieldname
  # value = map of (name, docstring, type etc)
  !view Setters(fields <: set of app.Type) -> set of memberFunction:
    fields -> (field:
      access = "public"
      returnType = "void"
      methodName = "set" + field.key
      methodArgs = field.key -> <methodArgs> (:
        argPair = field.key -> <argPair> (:
          datatype = JavaType(field.value).out
          fieldName = field.key
        )
      )
      methodBody = field -> <methodBody> (:
        statement = {field} -> <statement> (:
          assign_statement = field ->  <assign_statement> (:
            variable = "this." + .key
            value = .key
          )
        )
      )
    )

  !view classDef(typeName <: string, type <: set of app.Type) -> classDef:
    type -> (:
      className = typeName
      classBody = type -> <set of memberFunction> (:
        memberFunction = Getters(.fields) | Setters(.fields)
        dataMember = PrivateFields(.fields)
      )
    )

  !view filename(app <: sysl.App, typeName <: string, type <: sysl.Type) -> string:
    app -> (:
      filename = typeName + ".java"
    )

  !view javaFile(app <: sysl.App, typeName <: string, type <: sysl.Type) -> string:
    app -> (:

      package = .attrs.package -> <package> (name:
        packageName = name
      )

      import = {"package1", "package2"} -> <set of import>(name:
        importPath = name
      )

      definition = typeName -> <classDef> (:
        classDef = classDef(typeName, type)
      )
    )
