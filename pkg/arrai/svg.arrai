# Functions for working with SVG documents.

let comment = \k \v k = "comment";
let at = \k \v //seq.has_prefix("@", k);
# Filters out nodes of an AST that are keyed by "comment" or "@*".
let pred = \k \v !comment(k, v) && !at(k, v);

# Transforms an SVG AST into a more natural arr.ai structure.
let transformDoc = \ast
    let rec transformNode = \node (
        @tag: node.tag.name.'',
        attrs: node.attr?:{} => \(@item:a, ...) (@: a.name.'', @value: a.value.''),
        text: //seq.join("", node.text?:{} >> .''),
        children: node.node?:{} >> transformNode(.),
    );
    (header: //seq.join(' ', ast.header.''), root: transformNode(ast.node))
;

let toSvg = \m 
    let attrToString = \as $`${as => $`${.@}="${.@value}"` orderby .:: }`;
    let rec toString = \n 
        cond {
            n.children?:{}: $`
                <${n.@tag} ${attrToString(n.attrs)}>
                    ${n.children >> toString(.)::\i}${n.text}
                </${n.@tag}>
            `,
            _: $`<${n.@tag} ${attrToString(n.attrs)}>${n.text}</${n.@tag}>`,
        }
    ;

    $`
        ${m.header}
        ${toString(m.root)}
    `
;

(
    macro: (
        @grammar: //{./svg_grammar},
        @transform: (doc: transformDoc),
    ),
    :toSvg,
)
