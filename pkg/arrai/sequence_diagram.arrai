# Generates the PlantUML for a sequence diagram of "Client <- Do" in model.sysl.

let model = //{./sysl}.normalize(//{./sysl}.load('out/model.pb'));

# Transforms a module to a tree of calls between endpoints.
#
# Each call is a tuple with attributes `from` (the upstream endpoint), `to` (the downstream endpoint
# that `from` calls), and `calls` (a subtree of calls made by the downstream endpoint).
let rec toTree = \(:m, :appName, :epName)
    m.calls where .from.appName = appName && .from.epName = epName orderby .sourceContext.@
        >> (:.from, :.to, calls: toTree((:m, :.to.appName, :.to.epName)))
;

# Transforms an endpoint to a PlantUML sequence from `from` to `to`, including all downstream calls.
let rec toUml = \(:from, :to, :calls)
    let url = //seq.sub(' ', '%20', $`#${from.appName} ${from.epName} -> ${to.appName} ${to.epName}`);
    let returl = //seq.sub(' ', '%20', $`#${from.appName} ${from.epName} <-- ${to.appName} ${to.epName}`);
    $`
        ${from.appName} -> ${to.appName} : [[${url} ${to.epName}]]
        activate ${to.appName}
        ${cond calls {[_, ...]: calls >> toUml(.)}::\i}
        ${from.appName} <-- ${to.appName} : [[${returl} ok]]
        deactivate ${to.appName}
    `
;

# Appends `val` to `arr` if it's not already present.
let appendIfNew = \arr \val arr ++ cond (arr => .@item) & {val} {{}: [val]};

# Transforms a Sysl model into a sequence diagram, starting with a call to `appName <- epName`.
let toSeq = \m \(:appName, :epName) 
    let model = (
        from: (appName: '', epName: ''),
        to: (:appName, :epName),
        calls: toTree((:m, :appName, :epName))
    );

    # Returns a array of app names in the order they were first activated.
    let rec getApps = \(:from, :to, :calls) \all
        let all = appendIfNew(all, to.appName);
        cond {
            calls: //{./util}.reduceFlat(calls >> getApps(., all), appendIfNew, all),
            _: all,
        }
    ;

    # Enriches the app names with `type`, inferred from patterns and used as the primary sort key.
    let apps = (getApps(model, []) => \(:@, @item:name) 
        let patterns = //rel.union(m.apps where .appName = name => .appPatterns);
        let type = cond {{'db'} & patterns: 'database', _: 'control'};
        (:@, :name, :type)
    ) orderby [
        .type,
        .@
    ];

    $`
        @startuml
        skinparam MaxMessageSize 250
        skinparam sequence {
            ArrowColor grey
        }
        
        ${apps >> $`${.type} "${.name}"`::\i}

        ${toUml(model)}
        @enduml
    `
;

toSeq(model, (appName: 'PaymentServer', epName: 'POST /pay'))
