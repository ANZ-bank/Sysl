# Generates the PlantUML for a sequence diagram of "Client <- Do" in model.sysl.

let (:reduceFlat, ...) = //{github.com/arr-ai/arrai/contrib/util};

let (:loadBytes, :newNormalize, :calls, ...) = //{./sysl};
let model = newNormalize(loadBytes(//[//encoding.bytes]{./out/model.pb}));

# Transforms a module to a tree of calls between endpoints.
#
# Each call is a tuple with attributes `from` (the upstream endpoint), `to` (the downstream endpoint
# that `from` calls), and `calls` (a subtree of calls made by the downstream endpoint).
let rec toTree = \(:m, :appName, :epName)
    calls(m) where .from.appName = appName && .from.epName = epName orderby .
        >> (:.from, :.to, calls: toTree((:m, :.to.appName, :.to.epName)))
;

# Transforms an endpoint to a PlantUML sequence from `from` to `to`, including all downstream calls.
let rec toUml = \(:from, :to, :calls) \urls
    let label = cond {
        urls: $`[[${//seq.sub(' ', '%20', $`#${//seq.join(' :: ', from.appName)} ${from.epName} -> ${//seq.join(' :: ', from.appName)} ${to.epName}`)} ${to.epName}]]`,
        _: to.epName
    };
    let retLabel = cond {
        urls: $`[[${//seq.sub(' ', '%20', $`#${//seq.join(' :: ', from.appName)} ${from.epName} <-- ${//seq.join(' :: ', from.appName)} ${to.epName}`)} ok]]`,
        _: 'ok'
    };
    $`
        ${//seq.join(' :: ', from.appName)} -> ${//seq.join(' :: ', to.appName)} ++ : ${label}
        ${cond calls {[_, ...]: calls >> toUml(., urls)}::\i}
        return ${retLabel}
    `
;

# Appends `val` to `arr` if it's not already present.
let appendIfNew = \arr \val arr ++ cond (arr => .@item) & {val} {{}: [val]};

# Transforms a Sysl model into a sequence diagram, starting with a call to `appName <- epName`.
let toSeq = \m \(:appName, :epName) \urls
    let model = (
        from: (appName: '', epName: ''),
        to: (:appName, :epName),
        calls: toTree((:m, :appName, :epName)),
    );

    # Returns a array of app names in the order they were first activated.
    let rec getApps = \(:from, :to, :calls) \all
        let all = appendIfNew(all, to.appName);
        cond {
            calls: reduceFlat(calls >> getApps(., all), appendIfNew, all),
            _: all,
        }
    ;

    # Enriches the app names with `type`, inferred from patterns and used as the primary sort key.
    let apps = (getApps(model, []) => \(:@, @item:name)
        let patterns = //rel.union(m.app <&> m.tag.app where .appName = name => .appTag);
        let type = cond { patterns <: {'db'}: 'database', _: 'control'};
        (:@, :name, :type)
    ) orderby [.type, .@];

    $`
        @startuml
        skinparam MaxMessageSize 250
        ${cond {urls: $`
        skinparam sequence {
            ArrowColor grey
        }`}}

        ${apps >> $`${.type} "${//seq.join(' :: ', .name)}"`::\i}

        ${toUml(model, urls)}
        @enduml
    `
;

toSeq(model, (appName: ['Client'], epName: 'Do'), false)
