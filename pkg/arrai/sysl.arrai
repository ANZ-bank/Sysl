# Performs transformations of Sysl models, producing "better" Sysl models.

# Loads and returns a Sysl model.
let load = \path
    let syslDescriptor = //encoding.proto.descriptor(//os.file('sysl.pb'));
    //encoding.proto.decode(syslDescriptor, 'Module' , //os.file(path));

# Extracts the set of pattern attributes of an element.
let patterns = \x x.attrs?('patterns')?.a.elt:{} => .@item.s;

# A macro to convert `ret` statement payload string to structured tuples.
let payloadMacro = (
    @grammar: {://grammar.lang.wbnf:
        payload -> (status=("ok"|"error"|[1-5][0-9][0-9]) "<:"?)? type=[^ \t\[]*;
        .wrapRE -> /{\s*()\s*};
    :},
    @transform: (payload: //{./util}.simpleTransform),
);

# Converts a return statement payload into a tuple of its parts.
let parseReturn = \payload //{./util}.invokeMacro(payloadMacro, payload);

# Replaces all `ret` payloads with structured tuples.
let polishReturns = \m
    let tweak = \.
        . +> (ret: .ret +> (payload: parseReturn(.ret.payload)));

    m.apps?:{} >> \a a +> (endpoints: a.endpoints?:{} >> \p p +> (stmt: p.stmt?:[] >> \s
        cond s.ret?:{} {{}: s, _: tweak(s)}
    ))
;

# Applies polish functions to the appropriate elements of a Sysl model.
let polish = \m
    polishReturns(m)
    # TODO: More polish.
;

# Returns a normalised, relational model of a Sysl model.
let normalize = \m
    let apps = m.apps => \(@:appName, @value:app)
        (
            :appName,
            appPackage: app.attrs?('package')?.s:{},
            appDescription: app.attrs?('description')?.s:{},
            appPatterns: patterns(app),
            # TODO: Remove.
            appAnnotations: app.attrs?:{} >>> \k \v v.s?:(v.a.elt >> .s),
        )
    ;
    let appAnnos = (m.apps => \(@:appName, @value:app)
        app.attrs?:{} >>> \k \v 
            (
                :appName,
                appAnnoKey: k,
                appAnnoVal: v.s?:(v.a.elt >> .s),
            )
    ) -> //rel.union(.);

    # TODO: Rename eps.
    let endpoints = (m.apps => \(@:appName, @value:app)
        app.endpoints?:{} => \(@:epName, ...)
            (
                :appName,
                :epName,
            )
    ) -> //rel.union(.);

    let epAnnos = (m.apps => \(@:appName, @value:app)
        (app.endpoints?:{} => \(@:epName, @value:ep)
            ep.attrs?:{} >>> \k \v
                (
                    :appName,
                    :epName,
                    epAnnoKey: k,
                    epAnnoVal: v.s?:(v.a.elt >> .s),
                )
        ) -> //rel.union(.)
    ) -> //rel.union(.);

    let calls = //rel.union(m.apps => \(@:appName, @value:app)
        //rel.union(app.endpoints?:{} => \(@:epName, @value:ep)
            ep.stmt?:{} where .@item.call?:{} => 
                (
                    from: (
                        :appName,
                        :epName,
                    ),
                    to: (
                        appName: .@item.call.target.part.@item,
                        epName: .@item.call.endpoint,
                    ),
                    # TODO: Use stmt.source_context once populated by parser.
                    # https://github.com/anz-bank/sysl/issues/990
                    sourceContext: ep.source_context +> (:.@),
                )
        )
    );
    let types = //rel.union(m.apps => \(@:appName, @value:app)
        app.types?:{} => \(@:typeName, @value: t)
            (
                :appName,
                :typeName,
                annotations: t.attrs?:{} >>> \k \v v.s?:(v.a.elt >> .s),
            )
        ) where .
    ;
    let fields = //rel.union(m.apps => \(@:appName, @value:app)
        //rel.union(app.types?:{} => \(@:typeName, @value:type)
            type.relation?:(type.tuple?:()).attr_defs?:{} => \(@:fieldName, @value:field)
                let patterns = patterns(field);
                (
                    :appName,
                    :typeName,
                    :fieldName,
                    fieldType: cond field {
                        (primitive:p, ...): p,
                        (type_ref:(ref:(path:p), ...), ...): //seq.join('.', p),
                        _: '?',
                    },
                    fk: cond field.type_ref?.ref.path:{} {
                        [t, f]: (:appName, typeName: t, fieldName: f)
                    },
                    :patterns,
                    pk: !!({'pk'} & patterns),
                    opt: field.opt?:{},
                )
        ) where .
    );

    (
        :apps,
        :appAnnos,
        :endpoints,
        :epAnnos,
        :calls,
        :types,
        :fields,
        # TODO:
        # :annotations, (aka attributes)
        # :tags, (aka patterns)
    )
;

# Export the functions from the module.
(
    :load,
    :normalize,
    :parseReturn,
    :patterns,
    :polish,
)
