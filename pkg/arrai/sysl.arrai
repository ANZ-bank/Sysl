# Performs transformations of Sysl models, producing "better" Sysl models.

# Converts a return statement payload into a tuple of its parts.
let parse_return = \payload
    let @grammar = {://grammar.lang.wbnf:
        payload -> (status=("ok"|"error"|[1-5][0-9][0-9]) "<:")? type=[^ \t\[]*;
        .wrapRE -> /{\s*()\s*};
    :};
    let @transform = (payload: //{./util}.simpleTransform);
    let macro = (:@grammar, :@transform);
    //{./util}.invokeMacro(macro, payload);

# Replaces all `ret` payloads with structured tuples.
let polish_returns = \m
    let tweak = \.
        . +> (@item: .@item +> 
                    (ret: .@item.ret +> 
                         (payload: parse_return(.@item.ret.payload))));

    m.apps?:{} >> \a a.endpoints?:{} >> \p p.stmt?:[] >> 
        cond {
            .@item.ret?:{}: tweak(.),
            _: .,
        }
;

# Applies polish functions to the appropriate elements of a Sysl model.
let polish = \m
    polish_returns(m)
    # TODO: More polish.
;

# Export the functions from the module.
(
    :parse_return,
    :polish,
)
