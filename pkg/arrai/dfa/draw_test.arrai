let (:loadBytes, :polish, ...) = //{/pkg/arrai/sysl};

let model = polish(loadBytes(//[//encoding.bytes]{/pkg/arrai/out/model.pb}));

let drawFn = \type //{./draw_cmd}(model, type);

(
    # TODO: Fix and reintroduce.
    # testDrawSourceFooX: drawFn('Source.Foo.x') = $`
    #     @startuml
    #     title Source.Foo.x
    #     [A] "Fetch" <-- "Read" [Source]: Source.Foo.x
    #     [B] "Fetch" <-- "Read" [Source]: Source.Foo.x
    #     [C] "Fetch" <-- "FetchA" [C]: C.FetchResponse.cx
    #     [C] "Fetch" <-- "FetchB" [C]: C.FetchResponse.cx
    #     [C] "FetchA" <-- "Fetch" [A]: A.FetchResponse.ax
    #     [C] "FetchB" <-- "Fetch" [B]: B.FetchResponse.bx
    #     [Client] "Do" <-- "Fetch" [D]: D.FetchResponse.dx
    #     [D] "Fetch" <-- "Fetch" [A]: A.FetchResponse.ax
    #     @enduml
    # `,
    # testDrawSourceFooY: drawFn('Source.Foo.y') = $`
    #     @startuml
    #     title Source.Foo.y
    #     [A] "Fetch" <-- "Read" [Source]: Source.Foo.y
    #     [B] "Fetch" <-- "Read" [Source]: Source.Foo.y
    #     [C] "Fetch" <-- "FetchA" [C]: C.FetchResponse.cy
    #     [C] "Fetch" <-- "FetchB" [C]: C.FetchResponse.cy
    #     [C] "FetchA" <-- "Fetch" [A]: A.FetchResponse.ay
    #     [C] "FetchB" <-- "Fetch" [B]: B.FetchResponse.by
    #     [Client] "Do" <-- "Fetch" [D]: D.FetchResponse.dy
    #     [D] "Fetch" <-- "Fetch" [A]: A.FetchResponse.ay
    #     @enduml
    # `,
    # testDrawSourceFoo: drawFn('Source.Foo') = $`
    #     @startuml
    #     title Source.Foo
    #     [A] "Fetch" <-- "Read" [Source]: Source.Foo
    #     [B] "Fetch" <-- "Read" [Source]: Source.Foo
    #     [C] "Fetch" <-- "FetchA" [C]: C.FetchResponse.cx
    #     [C] "Fetch" <-- "FetchA" [C]: C.FetchResponse.cy
    #     [C] "Fetch" <-- "FetchB" [C]: C.FetchResponse.cx
    #     [C] "Fetch" <-- "FetchB" [C]: C.FetchResponse.cy
    #     [C] "FetchA" <-- "Fetch" [A]: A.FetchResponse.ax
    #     [C] "FetchA" <-- "Fetch" [A]: A.FetchResponse.ay
    #     [C] "FetchB" <-- "Fetch" [B]: B.FetchResponse.bx
    #     [C] "FetchB" <-- "Fetch" [B]: B.FetchResponse.by
    #     [Client] "Do" <-- "Fetch" [D]: D.FetchResponse.dx
    #     [Client] "Do" <-- "Fetch" [D]: D.FetchResponse.dy
    #     [D] "Fetch" <-- "Fetch" [A]: A.FetchResponse.ax
    #     [D] "Fetch" <-- "Fetch" [A]: A.FetchResponse.ay
    #     @enduml
    # `,
    ignored: true
)
