# Generates a Makefile to execute the tests of downstream repos.

# let blueprint = //eval.value(//os.stdin); 
let blueprint = //{./blueprint.arrai};

# Set to true to run local repo tests as well.
let testSelf = false;

# Returns the name for an app test target.
let test = \app \case $`_${app}.${case}`;

# Returns the name for an app clone target.
let clone = \app $`_${app}.clone`;

let default = \b (:b.name, :b.repo, path:b.path?:'', tests:b.tests?:{}, children:b.children?:{});

# Returns the content of a Makefile to execute downstream tests.
let toMakefile = \b
    let (:name, :repo, :path, :tests, :children) = default(b);

    let selfTestNames = $`${tests => test(name, .@) orderby .::}`;
    let childTestNames = $`
        ${(children => \(:name, ?: tests:{}) 
        	$`${tests => test(name, .@) orderby .:: }`
        ) orderby .:: \\\n\t}`;

    let repoDir = \repo
        let [..., x] = //seq.split("/", //seq.trim_suffix(".git", repo));
        x
    ;
    let testTargets = \b
        let local = repo = b.repo?:repo;
        let (:name, :repo, :path, :tests, :children) = default(b);
        $`
            ${tests => $`
                .PHONY: ${test(name, .@)}
                ${test(name, .@)}: ${cond {!local: clone(b.name)}}
                	${cond {
                        !local: $`cd .blueprints/children/${repoDir(repo)}${cond {path: $`/${path}`}} && `,
                        path: $`cd ${path} && `,
                    }}${.@value}
            ` orderby .::\i\n}
        `
    ;

    $`
        .PHONY: all init

        all: ${cond {testSelf: selfTestNames}}${cond {children: ' \\'}}
        	${childTestNames}

        init:
        	mkdir -p ./blueprint/children

        # ${name} (self)

        ${testTargets(b)}

        ${(children orderby [.repo != repo, .name] >> default(.) >> \c 
            let local = c.repo = repo;
            $`
                # ${c.name} ${cond {local: '(local)'}}

                ${cond {!local: $`
                    .PHONY: ${clone(c.name)}
                    ${clone(c.name)}: init
                    	git clone --depth=1 ${c.repo} ./blueprint/children
                `}}
                ${testTargets(c)}
            `)::\i\n}
    `
;

toMakefile(blueprint)
