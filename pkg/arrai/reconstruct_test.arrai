let (:load, :newNormalize, ...) = //{./sysl};

let model = newNormalize(load('out/model.pb'));
let all = newNormalize(load('out/all.pb'));

let reconstruct = //{./reconstruct};

let simple = (
    app: {(appName: ['A'])},
    type: {(appName: ['A'], typeName: 'T')},
    field: {(appName: ['A'], typeName: 'T', fieldName: 'f', fieldType: 'int', fieldOpt: false)},
    src: (app: {(appName: ['A'], appSrc: (file: 'a.sysl'))})
);

let nested = (
    app: {(appName: ['A']), (appName: ['B'])},
    src: (app: {(appName: ['A'], appSrc: (file: 'foo/a.sysl')), (appName: ['B'], appSrc: (file: 'foo/bar/b.sysl'))}),
);

(
    # Note: The following tests are commented out due to failure.
    #all: reconstruct(all) = //{./test_reconstruct_all},
    #model: reconstruct(model) = //{./test_reconstruct_model},

    simple: reconstruct(simple) = {'a.sysl': 'A:\n    !type T :\n        f <: int\n'},

    optional:
        let data = simple +> (field: simple.field => . +> (fieldOpt: true));
        reconstruct(data) = {'a.sysl': 'A:\n    !type T :\n        f <: int?\n'},

    newline: reconstruct(simple +> (anno: (field: {
        (simple.field single) +> (fieldAnnoName: 'desc', fieldAnnoValue: '\n')
    }))) = {'a.sysl': 'A:\n    !type T :\n        f <: int:\n            @desc =:\n                |\n'},

    nested:
        let expected = {'foo': {'a.sysl': 'A:\n    ...\n', 'bar': {'b.sysl': 'B:\n    ...\n'}}};
        let actual = reconstruct(nested);
        //test.assert.equal(expected, actual)
)
