(
  alias: {
    (
      aliasType: (
        appName: ['RestEndpoint'],
        typePath: ['Type'],
      ),
      appName: ['Types'],
      typeName: 'AliasForeignRef',
    ),
    (
      aliasType: (
        appName: ['Types'],
        typePath: ['Type'],
      ),
      appName: ['Types'],
      typeName: 'AliasRef',
    ),
    (
      aliasType: (
        primitive: 'INT',
      ),
      appName: ['Types'],
      typeName: 'Alias',
    ),
    (
      aliasType: (
        sequence: (
          primitive: 'STRING',
        ),
      ),
      appName: ['Types'],
      typeName: 'AliasSequence',
    ),
    (
      aliasType: (
        set: (
          appName: ['RestEndpoint'],
          typePath: ['Type'],
        ),
      ),
      appName: ['Types'],
      typeName: 'AliasForeignRefSet',
    ),
  },
  anno: (
    app: {
      (
        appAnnoName: 'annotation',
        appAnnoValue: 'annotation',
        appName: ['AppWithAnnotation'],
      ),
      (
        appAnnoName: 'annotation1',
        appAnnoValue: 'you can do string annotation like this',
        appName: ['AppWithAnnotation'],
      ),
      (
        appAnnoName: 'annotation2',
        appAnnoValue: ['or', 'in', 'an', 'array'],
        appName: ['AppWithAnnotation'],
      ),
      (
        appAnnoName: 'annotation3',
        appAnnoValue: 'you can also do\n multiline annotations\n like this\n',
        appName: ['AppWithAnnotation'],
      ),
    },
    ep: {
      (
        appName: ['EventAndSubscriber'],
        epAnnoName: 'annotations',
        epAnnoValue: 'annotation',
        epName: 'App -> Event',
      ),
      (
        appName: ['SimpleEndpoint'],
        epAnnoName: 'annotation',
        epAnnoValue: 'annotation',
        epName: 'SimpleEpWithAnnotations',
      ),
      (
        appName: ['Statements'],
        epAnnoName: 'annotation1',
        epAnnoValue: 'you can do string annotation like this',
        epName: 'Annotations',
      ),
      (
        appName: ['Statements'],
        epAnnoName: 'annotation2',
        epAnnoValue: ['or', 'in', 'an', 'array'],
        epName: 'Annotations',
      ),
      (
        appName: ['Statements'],
        epAnnoName: 'annotation3',
        epAnnoValue: 'you can also do\n multiline annotations\n like this\n',
        epName: 'Annotations',
      ),
    },
    event: {
      (
        appName: ['EventAndSubscriber'],
        eventAnnoName: 'annotations',
        eventAnnoValue: 'annotation',
        eventName: 'Event',
      ),
    },
    field: {
      (
        appName: ['Types'],
        fieldAnnoName: 'annotation',
        fieldAnnoValue: 'this is an annotation',
        fieldName: 'with_anno',
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldAnnoName: 'annotation',
        fieldAnnoValue: 'this is an annotation',
        fieldName: 'with_anno',
        typeName: 'Type',
      ),
    },
    mixin: {},
    param: {},
    stmt: {
      (
        appName: ['Statements'],
        epName: 'AnnotatedStatements',
        stmtAnnoName: 'annotation',
        stmtAnnoValue: 'annotation can be added for any statement as a string',
        stmtIndex: 0,
      ),
      (
        appName: ['Statements'],
        epName: 'AnnotatedStatements',
        stmtAnnoName: 'annotation',
        stmtAnnoValue: [['or', 'as', 'an'], ['array', 'of', 'arrays']],
        stmtIndex: 2,
      ),
    },
    type: {
      (
        appName: ['Types'],
        typeAnnoName: 'annotation',
        typeAnnoValue: 'annotation',
        typeName: 'Enum',
      ),
      (
        appName: ['Types'],
        typeAnnoName: 'annotation',
        typeAnnoValue: 'annotation',
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        typeAnnoName: 'annotation',
        typeAnnoValue: 'annotation',
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        typeAnnoName: 'annotation',
        typeAnnoValue: 'annotation',
        typeName: 'Union',
      ),
    },
    view: {},
  ),
  app: {
    (
      appDocstring: {},
      appLongName: {},
      appName: ['AppWithAnnotation'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['EventAndSubscriber'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['RestEndpoint'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['SimpleEndpoint'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['Statements'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['Types'],
    ),
    (
      appDocstring: {},
      appLongName: 'display name',
      appName: ['App'],
    ),
    (
      appDocstring: {},
      appLongName: 'display name',
      appName: ['App', 'with', 'subpackages'],
    ),
  },
  enum: {},
  ep: {
    (
      appName: ['EventAndSubscriber'],
      epDocstring: {},
      epEvent: (
        appName: (
          part: ['App'],
        ),
        eventName: 'Event',
      ),
      epLongName: {},
      epName: 'App -> Event',
      rest: {},
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'DELETE /',
      rest: (
        method: 'DELETE',
        path: '/',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'DELETE /param',
      rest: (
        method: 'DELETE',
        path: '/param',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'GET /',
      rest: (
        method: 'GET',
        path: '/',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'GET /nested1/nested2/nested3',
      rest: (
        method: 'GET',
        path: '/nested1/nested2/nested3',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'GET /notnested',
      rest: (
        method: 'GET',
        path: '/notnested',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'GET /param',
      rest: (
        method: 'GET',
        path: '/param',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'GET /pathwithtype/{native}',
      rest: (
        method: 'GET',
        path: '/pathwithtype/{native}',
        url_param: [
          (
            name: 'native',
            type: (
              primitive: 'INT',
              source_context: (
                end: (
                  col: 32,
                  line: 65,
                ),
                file: 'all.sysl',
                start: (
                  col: 18,
                  line: 65,
                ),
              ),
              source_contexts: [
                (
                  end: (
                    col: 32,
                    line: 65,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 18,
                    line: 65,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'GET /query',
      rest: (
        method: 'GET',
        path: '/query',
        query_param: [
          (
            name: 'native',
            type: (
              primitive: 'STRING',
              source_context: (
                end: (
                  col: 19,
                  line: 70,
                ),
                file: 'all.sysl',
                start: (
                  col: 12,
                  line: 70,
                ),
              ),
              source_contexts: [
                (
                  end: (
                    col: 19,
                    line: 70,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 12,
                    line: 70,
                  ),
                ),
              ],
            ),
          ),
          (
            name: 't',
            type: (
              source_context: (
                end: (
                  col: 28,
                  line: 70,
                ),
                file: 'all.sysl',
                start: (
                  col: 26,
                  line: 70,
                ),
              ),
              source_contexts: [
                (
                  end: (
                    col: 28,
                    line: 70,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 26,
                    line: 70,
                  ),
                ),
              ],
            ),
          ),
          (
            name: 'curly',
            type: (
              source_context: (
                end: (
                  col: 44,
                  line: 70,
                ),
                file: 'all.sysl',
                start: (
                  col: 33,
                  line: 70,
                ),
              ),
              source_contexts: [
                (
                  end: (
                    col: 44,
                    line: 70,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 33,
                    line: 70,
                  ),
                ),
              ],
              type_ref: (
                context: (
                  appname: (
                    part: ['RestEndpoint'],
                  ),
                ),
                ref: (
                  path: ['Type'],
                ),
              ),
            ),
          ),
          (
            name: 'optional',
            type: (
              opt: {
                (),
              },
              primitive: 'STRING',
              source_context: (
                end: (
                  col: 61,
                  line: 70,
                ),
                file: 'all.sysl',
                start: (
                  col: 46,
                  line: 70,
                ),
              ),
              source_contexts: [
                (
                  end: (
                    col: 61,
                    line: 70,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 46,
                    line: 70,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'PATCH /',
      rest: (
        method: 'PATCH',
        path: '/',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'PATCH /param',
      rest: (
        method: 'PATCH',
        path: '/param',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'POST /',
      rest: (
        method: 'POST',
        path: '/',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'POST /param',
      rest: (
        method: 'POST',
        path: '/param',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'PUT /',
      rest: (
        method: 'PUT',
        path: '/',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'PUT /param',
      rest: (
        method: 'PUT',
        path: '/param',
      ),
    ),
    (
      appName: ['SimpleEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'SimpleEp',
      rest: {},
    ),
    (
      appName: ['SimpleEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'SimpleEpWithAnnotations',
      rest: {},
    ),
    (
      appName: ['SimpleEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'SimpleEpWithArray',
      rest: {},
    ),
    (
      appName: ['SimpleEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'SimpleEpWithParamsRef',
      rest: {},
    ),
    (
      appName: ['SimpleEndpoint'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'SimpleEpWithTypes',
      rest: {},
    ),
    (
      appName: ['Statements'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'AnnotatedStatements',
      rest: {},
    ),
    (
      appName: ['Statements'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Annotations',
      rest: {},
    ),
    (
      appName: ['Statements'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Calls',
      rest: {},
    ),
    (
      appName: ['Statements'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'GroupStatements',
      rest: {},
    ),
    (
      appName: ['Statements'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'IfStmt',
      rest: {},
    ),
    (
      appName: ['Statements'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Loops',
      rest: {},
    ),
    (
      appName: ['Statements'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Miscellanous',
      rest: {},
    ),
    (
      appName: ['Statements'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'OneOfStatements',
      rest: {},
    ),
    (
      appName: ['Statements'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Returns',
      rest: {},
    ),
  },
  event: {
    (
      appName: ['App'],
      eventName: 'Event',
    ),
    (
      appName: ['EventAndSubscriber'],
      eventName: 'Event',
    ),
    (
      appName: ['EventAndSubscriber'],
      eventName: 'EventWithParams',
    ),
  },
  field: {
    (
      appName: ['RestEndpoint'],
      fieldConstraint: (),
      fieldName: 'x',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'Type',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'a',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Table.inplace',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'a',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Type.inplace',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'aliasSequence',
      fieldOpt: {},
      fieldType: (
        appName: ['Types'],
        typePath: ['Alias'],
      ),
      typeName: 'Type',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'b',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'Table.inplace',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'b',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'Type.inplace',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'inplace',
      fieldOpt: {},
      fieldType: (
        appName: ['Types'],
        typePath: ['inplace'],
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'inplace',
      fieldOpt: {},
      fieldType: (
        appName: ['Types'],
        typePath: ['inplace'],
      ),
      typeName: 'Type',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'nativeTypeField',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'nativeTypeField',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Type',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'optional',
      fieldOpt: {
        (),
      },
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'optional',
      fieldOpt: {
        (),
      },
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Type',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'primaryKey',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'reference',
      fieldOpt: {},
      fieldType: (
        appName: ['RestEndpoint'],
        typePath: ['Type'],
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'reference',
      fieldOpt: {},
      fieldType: (
        appName: ['RestEndpoint'],
        typePath: ['Type'],
      ),
      typeName: 'Type',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'sequence',
      fieldOpt: {},
      fieldType: (
        sequence: (
          primitive: 'STRING',
        ),
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'sequence',
      fieldOpt: {},
      fieldType: (
        sequence: (
          primitive: 'STRING',
        ),
      ),
      typeName: 'Type',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'set',
      fieldOpt: {},
      fieldType: (
        set: (
          primitive: 'STRING',
        ),
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'set',
      fieldOpt: {},
      fieldType: (
        set: (
          primitive: 'STRING',
        ),
      ),
      typeName: 'Type',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'with_anno',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (),
      fieldName: 'with_anno',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Type',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (
        length: (
          max: 5,
        ),
      ),
      fieldName: 'string_max_constraint',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (
        length: (
          max: 5,
        ),
        precision: 5,
        scale: 8,
      ),
      fieldName: 'decimal_with_precision',
      fieldOpt: {},
      fieldType: (
        primitive: 'DECIMAL',
      ),
      typeName: 'Table',
    ),
    (
      appName: ['Types'],
      fieldConstraint: (
        length: (
          max: 10,
        ),
      ),
      fieldName: 'string_range_constraint',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Table',
    ),
  },
  mixin: {},
  param: {
    (
      appName: ['RestEndpoint'],
      epName: 'DELETE /param',
      paramIndex: 0,
      paramLoc: 'method',
      paramName: 'with_string',
      paramOpt: {},
      paramType: (
        primitive: 'INT',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'GET /param',
      paramIndex: 0,
      paramLoc: 'method',
      paramName: {},
      paramOpt: {},
      paramType: {},
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'GET /pathwithtype/{native}',
      paramIndex: 0,
      paramLoc: 'path',
      paramName: 'native',
      paramOpt: {},
      paramType: (
        primitive: 'INT',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'GET /query',
      paramIndex: 0,
      paramLoc: 'query',
      paramName: 'native',
      paramOpt: {},
      paramType: (
        primitive: 'STRING',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'GET /query',
      paramIndex: 1,
      paramLoc: 'query',
      paramName: 't',
      paramOpt: {},
      paramType: {},
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'GET /query',
      paramIndex: 2,
      paramLoc: 'query',
      paramName: 'curly',
      paramOpt: {},
      paramType: (
        appName: ['RestEndpoint'],
        typePath: ['Type'],
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'GET /query',
      paramIndex: 3,
      paramLoc: 'query',
      paramName: 'optional',
      paramOpt: {
        (),
      },
      paramType: (
        primitive: 'STRING',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'PATCH /param',
      paramIndex: 0,
      paramLoc: 'body',
      paramName: 't',
      paramOpt: {},
      paramType: (
        appName: ['Types'],
        typePath: ['Type'],
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'POST /param',
      paramIndex: 0,
      paramLoc: 'method',
      paramName: 'native',
      paramOpt: {},
      paramType: (
        primitive: 'STRING',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'PUT /param',
      paramIndex: 0,
      paramLoc: 'method',
      paramName: 'unlimited',
      paramOpt: {},
      paramType: (
        primitive: 'STRING',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'PUT /param',
      paramIndex: 1,
      paramLoc: 'method',
      paramName: 'limited',
      paramOpt: {},
      paramType: (
        primitive: 'STRING',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'PUT /param',
      paramIndex: 2,
      paramLoc: 'method',
      paramName: 'num',
      paramOpt: {},
      paramType: (
        primitive: 'INT',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'PUT /param',
      paramIndex: 3,
      paramLoc: 'method',
      paramName: 'limited_num',
      paramOpt: {},
      paramType: (
        primitive: 'INT',
      ),
    ),
    (
      appName: ['RestEndpoint'],
      epName: 'PUT /param',
      paramIndex: 4,
      paramLoc: 'method',
      paramName: 'x',
      paramOpt: {},
      paramType: {},
    ),
    (
      appName: ['SimpleEndpoint'],
      epName: 'SimpleEpWithArray',
      paramIndex: 0,
      paramLoc: 'method',
      paramName: 'unlimited',
      paramOpt: {},
      paramType: (
        primitive: 'STRING',
      ),
    ),
    (
      appName: ['SimpleEndpoint'],
      epName: 'SimpleEpWithArray',
      paramIndex: 1,
      paramLoc: 'method',
      paramName: 'limited',
      paramOpt: {},
      paramType: (
        primitive: 'STRING',
      ),
    ),
    (
      appName: ['SimpleEndpoint'],
      epName: 'SimpleEpWithArray',
      paramIndex: 2,
      paramLoc: 'method',
      paramName: 'num',
      paramOpt: {},
      paramType: (
        primitive: 'INT',
      ),
    ),
    (
      appName: ['SimpleEndpoint'],
      epName: 'SimpleEpWithArray',
      paramIndex: 3,
      paramLoc: 'method',
      paramName: 'limited_num',
      paramOpt: {},
      paramType: (
        primitive: 'INT',
      ),
    ),
    (
      appName: ['SimpleEndpoint'],
      epName: 'SimpleEpWithArray',
      paramIndex: 4,
      paramLoc: 'method',
      paramName: 'x',
      paramOpt: {},
      paramType: {},
    ),
    (
      appName: ['SimpleEndpoint'],
      epName: 'SimpleEpWithParamsRef',
      paramIndex: 0,
      paramLoc: 'method',
      paramName: 'Types.type',
      paramOpt: {},
      paramType: {},
    ),
    (
      appName: ['SimpleEndpoint'],
      epName: 'SimpleEpWithTypes',
      paramIndex: 0,
      paramLoc: 'method',
      paramName: 'native',
      paramOpt: {},
      paramType: (
        primitive: 'STRING',
      ),
    ),
  },
  src: (
    app: {
      (
        appName: ['App'],
        appSrc: (
          end: (
            col: 29,
            line: 3,
          ),
          file: 'all.sysl',
          start: (
            col: 1,
            line: 3,
          ),
        ),
        appSrcs: [
          (
            end: (
              col: 29,
              line: 3,
            ),
            file: 'all.sysl',
            start: (
              col: 1,
              line: 3,
            ),
          ),
        ],
      ),
      (
        appName: ['App', 'with', 'subpackages'],
        appSrc: (
          end: (
            col: 27,
            line: 16,
          ),
          file: 'all.sysl',
          start: (
            col: 1,
            line: 16,
          ),
        ),
        appSrcs: [
          (
            end: (
              col: 27,
              line: 16,
            ),
            file: 'all.sysl',
            start: (
              col: 1,
              line: 16,
            ),
          ),
        ],
      ),
      (
        appName: ['AppWithAnnotation'],
        appSrc: (
          end: (
            line: 6,
          ),
          file: 'all.sysl',
          start: (
            col: 1,
            line: 6,
          ),
        ),
        appSrcs: [
          (
            end: (
              line: 6,
            ),
            file: 'all.sysl',
            start: (
              col: 1,
              line: 6,
            ),
          ),
        ],
      ),
      (
        appName: ['EventAndSubscriber'],
        appSrc: (
          end: (
            line: 254,
          ),
          file: 'all.sysl',
          start: (
            col: 1,
            line: 254,
          ),
        ),
        appSrcs: [
          (
            end: (
              line: 254,
            ),
            file: 'all.sysl',
            start: (
              col: 1,
              line: 254,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        appSrc: (
          end: (
            line: 37,
          ),
          file: 'all.sysl',
          start: (
            col: 1,
            line: 37,
          ),
        ),
        appSrcs: [
          (
            end: (
              line: 37,
            ),
            file: 'all.sysl',
            start: (
              col: 1,
              line: 37,
            ),
          ),
        ],
      ),
      (
        appName: ['SimpleEndpoint'],
        appSrc: (
          end: (
            line: 19,
          ),
          file: 'all.sysl',
          start: (
            col: 1,
            line: 19,
          ),
        ),
        appSrcs: [
          (
            end: (
              line: 19,
            ),
            file: 'all.sysl',
            start: (
              col: 1,
              line: 19,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        appSrc: (
          end: (
            line: 153,
          ),
          file: 'all.sysl',
          start: (
            col: 1,
            line: 153,
          ),
        ),
        appSrcs: [
          (
            end: (
              line: 153,
            ),
            file: 'all.sysl',
            start: (
              col: 1,
              line: 153,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        appSrc: (
          end: (
            line: 92,
          ),
          file: 'all.sysl',
          start: (
            col: 1,
            line: 92,
          ),
        ),
        appSrcs: [
          (
            end: (
              line: 92,
            ),
            file: 'all.sysl',
            start: (
              col: 1,
              line: 92,
            ),
          ),
        ],
      ),
    },
    ep: {
      (
        appName: ['EventAndSubscriber'],
        epName: 'App -> Event',
        epSrc: (
          end: (
            col: 4,
            line: 270,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 266,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 270,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 266,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'DELETE /',
        epSrc: (
          end: (
            col: 4,
            line: 53,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 50,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 53,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 50,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'DELETE /param',
        epSrc: (
          end: (
            col: 5,
            line: 92,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 89,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 5,
              line: 92,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 89,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /',
        epSrc: (
          end: (
            col: 8,
            line: 44,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 42,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 8,
              line: 44,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 42,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /nested1/nested2/nested3',
        epSrc: (
          end: (
            col: 4,
            line: 59,
          ),
          file: 'all.sysl',
          start: (
            col: 16,
            line: 56,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 59,
            ),
            file: 'all.sysl',
            start: (
              col: 16,
              line: 56,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /notnested',
        epSrc: (
          end: (
            col: 4,
            line: 65,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 60,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 65,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 60,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /param',
        epSrc: (
          end: (
            col: 8,
            line: 78,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 75,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 8,
              line: 78,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 75,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /pathwithtype/{native}',
        epSrc: (
          end: (
            col: 4,
            line: 69,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 66,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 69,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 66,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /query',
        epSrc: (
          end: (
            col: 4,
            line: 73,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 70,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 73,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 70,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PATCH /',
        epSrc: (
          end: (
            col: 8,
            line: 50,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 48,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 8,
              line: 50,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 48,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PATCH /param',
        epSrc: (
          end: (
            col: 8,
            line: 83,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 78,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 8,
              line: 83,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 78,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'POST /',
        epSrc: (
          end: (
            col: 8,
            line: 46,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 44,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 8,
              line: 46,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 44,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'POST /param',
        epSrc: (
          end: (
            col: 8,
            line: 86,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 83,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 8,
              line: 86,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 83,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /',
        epSrc: (
          end: (
            col: 8,
            line: 48,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 46,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 8,
              line: 48,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 46,
            ),
          ),
        ],
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /param',
        epSrc: (
          end: (
            col: 8,
            line: 89,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 86,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 8,
              line: 89,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 86,
            ),
          ),
        ],
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEp',
        epSrc: (
          end: (
            col: 4,
            line: 23,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 20,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 23,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 20,
            ),
          ),
        ],
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithAnnotations',
        epSrc: (
          end: (
            col: 12,
            line: 37,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 34,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 12,
              line: 37,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 34,
            ),
          ),
        ],
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithArray',
        epSrc: (
          end: (
            col: 4,
            line: 34,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 31,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 34,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 31,
            ),
          ),
        ],
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithParamsRef',
        epSrc: (
          end: (
            col: 4,
            line: 28,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 23,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 28,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 23,
            ),
          ),
        ],
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithTypes',
        epSrc: (
          end: (
            col: 4,
            line: 31,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 28,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 31,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 28,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        epName: 'AnnotatedStatements',
        epSrc: (
          end: (
            col: 4,
            line: 229,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 224,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 229,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 224,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        epName: 'Annotations',
        epSrc: (
          end: (
            col: 4,
            line: 224,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 216,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 224,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 216,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        epName: 'Calls',
        epSrc: (
          end: (
            col: 4,
            line: 197,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 190,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 197,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 190,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        epName: 'GroupStatements',
        epSrc: (
          end: (
            col: 4,
            line: 216,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 211,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 216,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 211,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        epName: 'IfStmt',
        epSrc: (
          end: (
            col: 4,
            line: 165,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 154,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 165,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 154,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        epName: 'Loops',
        epSrc: (
          end: (
            col: 4,
            line: 185,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 165,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 185,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 165,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        epName: 'Miscellanous',
        epSrc: (
          end: (
            col: 18,
            line: 254,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 229,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 18,
              line: 254,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 229,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        epName: 'OneOfStatements',
        epSrc: (
          end: (
            col: 4,
            line: 211,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 197,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 211,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 197,
            ),
          ),
        ],
      ),
      (
        appName: ['Statements'],
        epName: 'Returns',
        epSrc: (
          end: (
            col: 4,
            line: 190,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 185,
          ),
        ),
        epSrcs: [
          (
            end: (
              col: 4,
              line: 190,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 185,
            ),
          ),
        ],
      ),
    },
    event: {
      (
        appName: ['App'],
        eventName: 'Event',
        eventSrc: {},
        eventSrcs: {},
      ),
      (
        appName: ['EventAndSubscriber'],
        eventName: 'Event',
        eventSrc: (
          end: (
            col: 4,
            line: 262,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 255,
          ),
        ),
        eventSrcs: [
          (
            end: (
              col: 4,
              line: 262,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 255,
            ),
          ),
        ],
      ),
      (
        appName: ['EventAndSubscriber'],
        eventName: 'EventWithParams',
        eventSrc: (
          end: (
            col: 4,
            line: 266,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 262,
          ),
        ),
        eventSrcs: [
          (
            end: (
              col: 4,
              line: 266,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 262,
            ),
          ),
        ],
      ),
    },
    field: {
      (
        appName: ['RestEndpoint'],
        fieldName: 'x',
        fieldSrc: (
          end: (
            col: 13,
            line: 39,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 39,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 13,
              line: 39,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 39,
            ),
          ),
        ],
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        fieldName: 'a',
        fieldSrc: (
          end: (
            col: 17,
            line: 105,
          ),
          file: 'all.sysl',
          start: (
            col: 12,
            line: 105,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 17,
              line: 105,
            ),
            file: 'all.sysl',
            start: (
              col: 12,
              line: 105,
            ),
          ),
        ],
        typeName: 'Type.inplace',
      ),
      (
        appName: ['Types'],
        fieldName: 'a',
        fieldSrc: (
          end: (
            col: 17,
            line: 123,
          ),
          file: 'all.sysl',
          start: (
            col: 12,
            line: 123,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 17,
              line: 123,
            ),
            file: 'all.sysl',
            start: (
              col: 12,
              line: 123,
            ),
          ),
        ],
        typeName: 'Table.inplace',
      ),
      (
        appName: ['Types'],
        fieldName: 'aliasSequence',
        fieldSrc: (
          end: (
            col: 25,
            line: 101,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 101,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 25,
              line: 101,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 101,
            ),
          ),
        ],
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        fieldName: 'b',
        fieldSrc: (
          end: (
            col: 17,
            line: 106,
          ),
          file: 'all.sysl',
          start: (
            col: 12,
            line: 106,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 17,
              line: 106,
            ),
            file: 'all.sysl',
            start: (
              col: 12,
              line: 106,
            ),
          ),
        ],
        typeName: 'Type.inplace',
      ),
      (
        appName: ['Types'],
        fieldName: 'b',
        fieldSrc: (
          end: (
            col: 17,
            line: 124,
          ),
          file: 'all.sysl',
          start: (
            col: 12,
            line: 124,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 17,
              line: 124,
            ),
            file: 'all.sysl',
            start: (
              col: 12,
              line: 124,
            ),
          ),
        ],
        typeName: 'Table.inplace',
      ),
      (
        appName: ['Types'],
        fieldName: 'decimal_with_precision',
        fieldSrc: (
          end: (
            col: 45,
            line: 119,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 119,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 45,
              line: 119,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 119,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'inplace',
        fieldSrc: (
          end: (
            col: 4,
            line: 108,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 104,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 4,
              line: 108,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 104,
            ),
          ),
        ],
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        fieldName: 'inplace',
        fieldSrc: (
          end: (
            col: 4,
            line: 126,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 122,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 4,
              line: 126,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 122,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'nativeTypeField',
        fieldSrc: (
          end: (
            col: 27,
            line: 96,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 96,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 27,
              line: 96,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 96,
            ),
          ),
        ],
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        fieldName: 'nativeTypeField',
        fieldSrc: (
          end: (
            col: 27,
            line: 112,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 112,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 27,
              line: 112,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 112,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'optional',
        fieldSrc: (
          end: (
            col: 26,
            line: 98,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 98,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 26,
              line: 98,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 98,
            ),
          ),
        ],
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        fieldName: 'optional',
        fieldSrc: (
          end: (
            col: 26,
            line: 114,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 114,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 26,
              line: 114,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 114,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'primaryKey',
        fieldSrc: (
          end: (
            col: 33,
            line: 111,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 111,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 33,
              line: 111,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 111,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'reference',
        fieldSrc: (
          end: (
            col: 34,
            line: 97,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 97,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 34,
              line: 97,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 97,
            ),
          ),
        ],
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        fieldName: 'reference',
        fieldSrc: (
          end: (
            col: 34,
            line: 113,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 113,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 34,
              line: 113,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 113,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'sequence',
        fieldSrc: (
          end: (
            col: 32,
            line: 100,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 100,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 32,
              line: 100,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 100,
            ),
          ),
        ],
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        fieldName: 'sequence',
        fieldSrc: (
          end: (
            col: 32,
            line: 116,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 116,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 32,
              line: 116,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 116,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'set',
        fieldSrc: (
          end: (
            col: 22,
            line: 99,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 99,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 22,
              line: 99,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 99,
            ),
          ),
        ],
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        fieldName: 'set',
        fieldSrc: (
          end: (
            col: 22,
            line: 115,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 115,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 22,
              line: 115,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 115,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'string_max_constraint',
        fieldSrc: (
          end: (
            col: 41,
            line: 120,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 120,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 41,
              line: 120,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 120,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'string_range_constraint',
        fieldSrc: (
          end: (
            col: 47,
            line: 121,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 121,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 47,
              line: 121,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 121,
            ),
          ),
        ],
        typeName: 'Table',
      ),
      (
        appName: ['Types'],
        fieldName: 'with_anno',
        fieldSrc: (
          end: (
            col: 8,
            line: 104,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 102,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 8,
              line: 104,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 102,
            ),
          ),
        ],
        typeName: 'Type',
      ),
      (
        appName: ['Types'],
        fieldName: 'with_anno',
        fieldSrc: (
          end: (
            col: 8,
            line: 119,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 117,
          ),
        ),
        fieldSrcs: [
          (
            end: (
              col: 8,
              line: 119,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 117,
            ),
          ),
        ],
        typeName: 'Table',
      ),
    },
    mixin: {},
    param: {
      (
        appName: ['RestEndpoint'],
        epName: 'DELETE /param',
        paramName: 'with_string',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /param',
        paramName: {},
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /pathwithtype/{native}',
        paramName: 'native',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /query',
        paramName: 'curly',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /query',
        paramName: 'native',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /query',
        paramName: 'optional',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /query',
        paramName: 't',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PATCH /param',
        paramName: 't',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'POST /param',
        paramName: 'native',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /param',
        paramName: 'limited',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /param',
        paramName: 'limited_num',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /param',
        paramName: 'num',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /param',
        paramName: 'unlimited',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /param',
        paramName: 'x',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithArray',
        paramName: 'limited',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithArray',
        paramName: 'limited_num',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithArray',
        paramName: 'num',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithArray',
        paramName: 'unlimited',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithArray',
        paramName: 'x',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithParamsRef',
        paramName: 'Types.type',
        paramSrc: {},
        paramSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithTypes',
        paramName: 'native',
        paramSrc: {},
        paramSrcs: {},
      ),
    },
    stmt: {
      (
        appName: ['EventAndSubscriber'],
        epName: 'App -> Event',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'DELETE /',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'DELETE /param',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /nested1/nested2/nested3',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /notnested',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /param',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /pathwithtype/{native}',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /query',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PATCH /',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PATCH /param',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'POST /',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'POST /param',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /param',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEp',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithAnnotations',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithArray',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithParamsRef',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['SimpleEndpoint'],
        epName: 'SimpleEpWithTypes',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['Statements'],
        epName: 'AnnotatedStatements',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['Statements'],
        epName: 'Calls',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['Statements'],
        epName: 'GroupStatements',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['Statements'],
        epName: 'IfStmt',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['Statements'],
        epName: 'Loops',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['Statements'],
        epName: 'Miscellanous',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['Statements'],
        epName: 'OneOfStatements',
        stmtSrc: {},
        stmtSrcs: {},
      ),
      (
        appName: ['Statements'],
        epName: 'Returns',
        stmtSrc: {},
        stmtSrcs: {},
      ),
    },
    type: {
      (
        appName: ['RestEndpoint'],
        typeName: 'Type',
        typeSrc: (
          end: (
            col: 4,
            line: 41,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 38,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 4,
              line: 41,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 38,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        typeName: 'Alias',
        typeSrc: (
          end: (
            col: 4,
            line: 141,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 138,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 4,
              line: 141,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 138,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        typeName: 'AliasForeignRef',
        typeSrc: (
          end: (
            col: 4,
            line: 150,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 147,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 4,
              line: 150,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 147,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        typeName: 'AliasForeignRefSet',
        typeSrc: (
          end: (
            col: 10,
            line: 153,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 150,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 10,
              line: 153,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 150,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        typeName: 'AliasRef',
        typeSrc: (
          end: (
            col: 4,
            line: 147,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 144,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 4,
              line: 147,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 144,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        typeName: 'AliasSequence',
        typeSrc: (
          end: (
            col: 4,
            line: 144,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 141,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 4,
              line: 144,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 141,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        typeName: 'Enum',
        typeSrc: (
          end: (
            col: 4,
            line: 131,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 126,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 4,
              line: 131,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 126,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        typeName: 'Table',
        typeSrc: (
          end: (
            col: 4,
            line: 126,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 108,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 4,
              line: 126,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 108,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        typeName: 'Table.inplace',
        typeSrc: {},
        typeSrcs: {},
      ),
      (
        appName: ['Types'],
        typeName: 'Type',
        typeSrc: (
          end: (
            col: 4,
            line: 108,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 93,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 4,
              line: 108,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 93,
            ),
          ),
        ],
      ),
      (
        appName: ['Types'],
        typeName: 'Type.inplace',
        typeSrc: {},
        typeSrcs: {},
      ),
      (
        appName: ['Types'],
        typeName: 'Union',
        typeSrc: (
          end: (
            col: 4,
            line: 138,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 131,
          ),
        ),
        typeSrcs: [
          (
            end: (
              col: 4,
              line: 138,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 131,
            ),
          ),
        ],
      ),
    },
    view: {},
  ),
  stmt: {
    (
      appName: ['Statements'],
      epName: 'AnnotatedStatements',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        attr: (
          modifier: {},
          nvp: {
            'annotation': (
              a: ['as', 'an', 'array'],
            ),
          },
        ),
        status: 'ok',
        type: (
          primitive: ['string'],
        ),
      ),
    ),
    (
      appName: ['Statements'],
      epName: 'AnnotatedStatements',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['Statements'],
        epName: 'Miscellanous',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'AnnotatedStatements',
      stmtAction: '"statement"',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 2,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Calls',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['RestEndpoint'],
        epName: 'GET /param',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Calls',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['Statements'],
        epName: 'Returns',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'GroupStatements',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: (
        title: 'grouped',
      ),
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'IfStmt',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: (
        title: 'else',
      ),
      stmtIndex: 2,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'IfStmt',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: (
        title: 'else if predicate2',
      ),
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'IfStmt',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: (
        test: 'predicate1',
      ),
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Loops',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: (
        criterion: 'predicate',
        mode: 'UNTIL',
      ),
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Loops',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 5,
      stmtLoop: (
        criterion: 'predicate',
        mode: 'WHILE',
      ),
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Loops',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: (
        title: 'alt predicate',
      ),
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Loops',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: (
        title: 'for predicate',
      ),
      stmtIndex: 3,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Loops',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: (
        title: 'loop predicate',
      ),
      stmtIndex: 4,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Loops',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: (
        coll: 'predicate',
      ),
      stmtGroup: {},
      stmtIndex: 2,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Miscellanous',
      stmtAction: '"string statements"',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Miscellanous',
      stmtAction: 'SimpleEndpoint -> SimpleEp',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 2,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Miscellanous',
      stmtAction: '| you can add comments like this',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'OneOfStatements',
      stmtAction: {},
      stmtAlt: (
        choice: [
          (
            cond: 'case1',
            stmt: [
              (
                ret: (
                  payload: 'ok <: string',
                ),
                source_context: (
                  end: (
                    col: 22,
                    line: 201,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 16,
                    line: 201,
                  ),
                ),
                source_contexts: [
                  (
                    end: (
                      col: 22,
                      line: 201,
                    ),
                    file: 'all.sysl',
                    start: (
                      col: 16,
                      line: 201,
                    ),
                  ),
                ],
              ),
            ],
          ),
          (
            cond: 'case number 2',
            stmt: [
              (
                ret: (
                  payload: 'ok <: int',
                ),
                source_context: (
                  end: (
                    col: 22,
                    line: 204,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 16,
                    line: 204,
                  ),
                ),
                source_contexts: [
                  (
                    end: (
                      col: 22,
                      line: 204,
                    ),
                    file: 'all.sysl',
                    start: (
                      col: 16,
                      line: 204,
                    ),
                  ),
                ],
              ),
            ],
          ),
          (
            cond: '"case 3"',
            stmt: [
              (
                ret: (
                  payload: 'ok <: Types.Type',
                ),
                source_context: (
                  end: (
                    col: 22,
                    line: 207,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 16,
                    line: 207,
                  ),
                ),
                source_contexts: [
                  (
                    end: (
                      col: 22,
                      line: 207,
                    ),
                    file: 'all.sysl',
                    start: (
                      col: 16,
                      line: 207,
                    ),
                  ),
                ],
              ),
            ],
          ),
          (
            stmt: [
              (
                ret: (
                  payload: 'error <: string',
                ),
                source_context: (
                  end: (
                    col: 22,
                    line: 209,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 16,
                    line: 209,
                  ),
                ),
                source_contexts: [
                  (
                    end: (
                      col: 22,
                      line: 209,
                    ),
                    file: 'all.sysl',
                    start: (
                      col: 16,
                      line: 209,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ],
      ),
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Statements'],
      epName: 'Returns',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        attr: (
          modifier: {},
          nvp: {},
        ),
        status: 'ok',
        type: (
          primitive: ['string'],
        ),
      ),
    ),
    (
      appName: ['Statements'],
      epName: 'Returns',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        attr: (
          modifier: {},
          nvp: {},
        ),
        status: 'ok',
        type: (
          appName: ['Types'],
          typePath: ['Type'],
        ),
      ),
    ),
    (
      appName: ['Statements'],
      epName: 'Returns',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 2,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        attr: (
          modifier: {},
          nvp: {},
        ),
        status: 'error',
        type: (
          appName: ['Types'],
          typePath: ['Type'],
        ),
      ),
    ),
  },
  table: {
    (
      appName: ['Types'],
      pk: ['primaryKey'],
      typeName: 'Table',
    ),
  },
  tag: (
    app: {
      (
        appName: ['App'],
        appTag: 'abstract',
      ),
    },
    ep: {
      (
        appName: ['RestEndpoint'],
        epName: 'DELETE /',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'DELETE /param',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /nested1/nested2/nested3',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /notnested',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /param',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /pathwithtype/{native}',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /query',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PATCH /',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PATCH /param',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'POST /',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'POST /param',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /',
        epTag: 'rest',
      ),
      (
        appName: ['RestEndpoint'],
        epName: 'PUT /param',
        epTag: 'rest',
      ),
    },
    event: {},
    field: {
      (
        appName: ['Types'],
        fieldName: 'primaryKey',
        fieldTag: 'pk',
        typeName: 'Table',
      ),
    },
    mixin: {},
    param: {
      (
        appName: ['RestEndpoint'],
        epName: 'PATCH /param',
        paramName: 't',
        paramTag: 'body',
      ),
    },
    stmt: {},
    type: {},
    view: {},
  ),
  type: {
    (
      appName: ['RestEndpoint'],
      typeDocstring: {},
      typeName: 'Type',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'Alias',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'AliasForeignRef',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'AliasForeignRefSet',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'AliasRef',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'AliasSequence',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'Enum',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'Table',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'Table.inplace',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'Type',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'Type.inplace',
      typeOpt: {},
    ),
    (
      appName: ['Types'],
      typeDocstring: {},
      typeName: 'Union',
      typeOpt: {},
    ),
  },
  view: {},
)
