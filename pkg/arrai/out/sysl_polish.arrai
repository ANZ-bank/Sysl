(
  apps: {
    'A': (
      endpoints: {
        'Fetch': (
          name: 'Fetch',
          source_context: (
            end: (
              col: 4,
              line: 29
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 25
            )
          ),
          stmt: [
            (
              call: (
                endpoint: 'Read',
                target: (
                  part: ['Source']
                )
              )
            ),
            (
              ret: (
                payload: (
                  attr: (
                    modifier: {},
                    nvp: {
                      'dataflow': (
                        d: {
                          'A.FetchResponse.ax': 'Source.Foo.x',
                          'A.FetchResponse.ay': 'Source.Foo.y'
                        }
                      ),
                      'description': '1:1 transform'
                    }
                  ),
                  type: 'A.FetchResponse'
                )
              )
            )
          ]
        )
      },
      name: (
        part: ['A']
      ),
      source_context: (
        end: (
          line: 24
        ),
        file: 'dev/sysl/pkg/arrai/model.sysl',
        start: (
          col: 1,
          line: 24
        )
      ),
      types: {
        'FetchResponse': (
          source_context: (
            end: (
              col: 1,
              line: 33
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 29
            )
          ),
          tuple: (
            attr_defs: {
              'ax': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 30
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 30
                  )
                )
              ),
              'ay': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 31
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 31
                  )
                )
              )
            }
          )
        )
      }
    ),
    'B': (
      endpoints: {
        'Fetch': (
          name: 'Fetch',
          source_context: (
            end: (
              col: 4,
              line: 38
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 34
            )
          ),
          stmt: [
            (
              call: (
                endpoint: 'Read',
                target: (
                  part: ['Source']
                )
              )
            ),
            (
              ret: (
                payload: (
                  attr: (
                    modifier: {},
                    nvp: {
                      'dataflow': (
                        d: {
                          'B.FetchResponse.bx': 'Source.Foo.x',
                          'B.FetchResponse.by': 'Source.Foo.y'
                        }
                      ),
                      'description': '1:1 transform'
                    }
                  ),
                  type: 'B.FetchResponse'
                )
              )
            )
          ]
        )
      },
      name: (
        part: ['B']
      ),
      source_context: (
        end: (
          line: 33
        ),
        file: 'dev/sysl/pkg/arrai/model.sysl',
        start: (
          col: 1,
          line: 33
        )
      ),
      types: {
        'FetchResponse': (
          source_context: (
            end: (
              col: 1,
              line: 42
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 38
            )
          ),
          tuple: (
            attr_defs: {
              'bx': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 39
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 39
                  )
                )
              ),
              'by': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 40
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 40
                  )
                )
              )
            }
          )
        )
      }
    ),
    'C': (
      endpoints: {
        'Fetch': (
          name: 'Fetch',
          source_context: (
            end: (
              col: 4,
              line: 57
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 52
            )
          ),
          stmt: [
            (
              call: (
                endpoint: 'FetchA',
                target: (
                  part: ['C']
                )
              )
            ),
            (
              call: (
                endpoint: 'FetchB',
                target: (
                  part: ['C']
                )
              )
            ),
            (
              ret: (
                payload: (
                  attr: (
                    modifier: {},
                    nvp: {
                      'dataflow': (
                        d: {
                          'C.FetchResponse.cx': (
                            a: ['A.FetchResponse.ax', 'B.FetchResponse.bx']
                          ),
                          'C.FetchResponse.cy': (
                            a: ['A.FetchResponse.ay', 'B.FetchResponse.by']
                          )
                        }
                      ),
                      'description': '1:1 transform'
                    }
                  ),
                  type: 'C.FetchResponse'
                )
              )
            )
          ]
        ),
        'FetchA': (
          name: 'FetchA',
          source_context: (
            end: (
              col: 4,
              line: 47
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 43
            )
          ),
          stmt: [
            (
              call: (
                endpoint: 'Fetch',
                target: (
                  part: ['A']
                )
              )
            ),
            (
              ret: (
                payload: (
                  attr: (
                    modifier: {},
                    nvp: {
                      'dataflow': (
                        d: {
                          'C.FetchResponse.cx': 'A.FetchResponse.ax',
                          'C.FetchResponse.cy': 'A.FetchResponse.ay'
                        }
                      ),
                      'description': '1:1 transform'
                    }
                  ),
                  type: 'C.FetchResponse'
                )
              )
            )
          ]
        ),
        'FetchB': (
          name: 'FetchB',
          source_context: (
            end: (
              col: 4,
              line: 52
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 47
            )
          ),
          stmt: [
            (
              call: (
                endpoint: 'Fetch',
                target: (
                  part: ['B']
                )
              )
            ),
            (
              ret: (
                payload: (
                  attr: (
                    modifier: {},
                    nvp: {
                      'dataflow': (
                        d: {
                          'C.FetchResponse.cx': 'B.FetchResponse.bx',
                          'C.FetchResponse.cy': 'B.FetchResponse.by'
                        }
                      ),
                      'description': '1:1 transform'
                    }
                  ),
                  type: 'C.FetchResponse'
                )
              )
            )
          ]
        )
      },
      name: (
        part: ['C']
      ),
      source_context: (
        end: (
          line: 42
        ),
        file: 'dev/sysl/pkg/arrai/model.sysl',
        start: (
          col: 1,
          line: 42
        )
      ),
      types: {
        'FetchResponse': (
          source_context: (
            end: (
              col: 1,
              line: 61
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 57
            )
          ),
          tuple: (
            attr_defs: {
              'cx': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 58
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 58
                  )
                )
              ),
              'cy': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 59
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 59
                  )
                )
              )
            }
          )
        )
      }
    ),
    'Client': (
      endpoints: {
        'Do': (
          name: 'Do',
          source_context: (
            end: (
              col: 4,
              line: 76
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 72
            )
          ),
          stmt: [
            (
              call: (
                endpoint: 'Fetch',
                target: (
                  part: ['D']
                )
              )
            ),
            (
              ret: (
                payload: (
                  attr: (
                    modifier: {},
                    nvp: {
                      'dataflow': (
                        d: {
                          'Client.Screen.xx': 'D.FetchResponse.dx',
                          'Client.Screen.yy': 'D.FetchResponse.dy'
                        }
                      ),
                      'description': '1:1 transform'
                    }
                  ),
                  type: 'Client.Screen'
                )
              )
            )
          ]
        )
      },
      name: (
        part: ['Client']
      ),
      source_context: (
        end: (
          line: 71
        ),
        file: 'dev/sysl/pkg/arrai/model.sysl',
        start: (
          col: 1,
          line: 71
        )
      ),
      types: {
        'Screen': (
          source_context: (
            end: (
              col: 5,
              line: 80
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 76
            )
          ),
          tuple: (
            attr_defs: {
              'xx': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 77
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 77
                  )
                )
              ),
              'yy': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 78
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 78
                  )
                )
              )
            }
          )
        )
      }
    ),
    'D': (
      endpoints: {
        'Fetch': (
          name: 'Fetch',
          source_context: (
            end: (
              col: 4,
              line: 67
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 62
            )
          ),
          stmt: [
            (
              call: (
                endpoint: 'Fetch',
                target: (
                  part: ['A']
                )
              )
            ),
            (
              call: (
                endpoint: 'Fetch',
                target: (
                  part: ['C']
                )
              )
            ),
            (
              ret: (
                payload: (
                  attr: (
                    modifier: {},
                    nvp: {
                      'dataflow': (
                        d: {
                          'D.FetchResponse.dx': (
                            a: ['A.FetchResponse.ax', 'C.FetchResponse.cx']
                          ),
                          'D.FetchResponse.dy': (
                            a: ['A.FetchResponse.ay', 'C.FetchResponse.cy']
                          )
                        }
                      ),
                      'description': '1:1 transform'
                    }
                  ),
                  type: 'D.FetchResponse'
                )
              )
            )
          ]
        )
      },
      name: (
        part: ['D']
      ),
      source_context: (
        end: (
          line: 61
        ),
        file: 'dev/sysl/pkg/arrai/model.sysl',
        start: (
          col: 1,
          line: 61
        )
      ),
      types: {
        'FetchResponse': (
          source_context: (
            end: (
              col: 6,
              line: 71
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 67
            )
          ),
          tuple: (
            attr_defs: {
              'dx': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 68
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 68
                  )
                )
              ),
              'dy': (
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 14,
                    line: 69
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 14,
                    line: 69
                  )
                )
              )
            }
          )
        )
      }
    ),
    'Pizza :: Supreme': (
      endpoints: {
        'DoEverything': (
          name: 'DoEverything',
          param: [
            (
              name: 'x',
              type: (
                primitive: 'STRING'
              )
            ),
            (
              name: 'y',
              type: (
                primitive: 'STRING'
              )
            )
          ],
          source_context: (
            end: (
              col: 4,
              line: 105
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 81
            )
          ),
          stmt: [
            (
              action: (
                action: 'an action'
              )
            ),
            (
              call: (
                arg: [
                  (
                    name: '"1"'
                  ),
                  (
                    name: '"2"'
                  )
                ],
                endpoint: 'DoEverything',
                target: (
                  part: ['Pizza', 'Supreme']
                )
              )
            ),
            (
              cond: (
                stmt: [
                  (
                    action: (
                      action: 'success'
                    )
                  )
                ],
                test: 'test'
              )
            ),
            (
              group: (
                stmt: [
                  (
                    action: (
                      action: 'success'
                    )
                  )
                ],
                title: 'else if test2'
              )
            ),
            (
              group: (
                stmt: [
                  (
                    action: (
                      action: 'failure'
                    )
                  )
                ],
                title: 'else'
              )
            ),
            (
              group: (
                stmt: [
                  (
                    action: (
                      action: 'do loop'
                    )
                  )
                ],
                title: 'loop pred'
              )
            ),
            (
              foreach: (
                collection: 'pred',
                stmt: [
                  (
                    action: (
                      action: 'do each'
                    )
                  )
                ]
              )
            ),
            (
              group: (
                stmt: [
                  (
                    action: (
                      action: 'do alt'
                    )
                  )
                ],
                title: 'alt pred'
              )
            ),
            (
              group: (
                stmt: [
                  (
                    action: (
                      action: 'inner'
                    )
                  )
                ],
                title: 'group label'
              )
            ),
            (
              ret: (
                payload: (
                  attr: (
                    modifier: {},
                    nvp: {}
                  ),
                  type: 'Pizza :: Supreme.int'
                )
              )
            )
          ]
        ),
        'Event': (
          is_pubsub: {
            (            )
          },
          name: 'Event',
          source_context: (
            end: (
              col: 15,
              line: 114
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 114
            )
          ),
          stmt: [
            (
              call: (
                endpoint: 'Pizza :: Supreme -> Event',
                target: (
                  part: ['Pizza', 'Supreme']
                )
              )
            )
          ]
        ),
        'GET /a/{ap}': (
          attrs: {
            'patterns': (
              a: (
                elt: [
                  (
                    s: 'rest'
                  )
                ]
              )
            )
          },
          name: 'GET /a/{ap}',
          rest_params: (
            method: 'GET',
            path: '/a/{ap}',
            query_param: [
              (
                name: 'aq',
                type: (
                  primitive: 'INT',
                  source_context: (
                    end: (
                      col: 15,
                      line: 106
                    ),
                    file: 'dev/sysl/pkg/arrai/model.sysl',
                    start: (
                      col: 12,
                      line: 106
                    )
                  )
                )
              )
            ],
            url_param: [
              (
                name: 'ap',
                type: (
                  primitive: 'STRING',
                  source_context: (
                    end: (
                      col: 20,
                      line: 105
                    ),
                    file: 'dev/sysl/pkg/arrai/model.sysl',
                    start: (
                      col: 7,
                      line: 105
                    )
                  )
                )
              )
            ]
          ),
          source_context: (
            end: (
              col: 4,
              line: 108
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 8,
              line: 106
            )
          ),
          stmt: [
            (
              action: (
                action: '...'
              )
            )
          ]
        ),
        'POST /b/{bp}': (
          attrs: {
            'patterns': (
              a: (
                elt: [
                  (
                    s: 'rest'
                  )
                ]
              )
            )
          },
          name: 'POST /b/{bp}',
          rest_params: (
            method: 'POST',
            path: '/b/{bp}',
            query_param: [
              (
                name: 'bq',
                type: (
                  primitive: 'INT',
                  source_context: (
                    end: (
                      col: 16,
                      line: 109
                    ),
                    file: 'dev/sysl/pkg/arrai/model.sysl',
                    start: (
                      col: 13,
                      line: 109
                    )
                  )
                )
              )
            ],
            url_param: [
              (
                name: 'bp',
                type: (
                  primitive: 'STRING',
                  source_context: (
                    end: (
                      col: 20,
                      line: 108
                    ),
                    file: 'dev/sysl/pkg/arrai/model.sysl',
                    start: (
                      col: 7,
                      line: 108
                    )
                  )
                )
              )
            ]
          ),
          source_context: (
            end: (
              col: 8,
              line: 111
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 8,
              line: 109
            )
          ),
          stmt: [
            (
              action: (
                action: '...'
              )
            )
          ]
        ),
        'PUT /b/{bp}': (
          attrs: {
            'patterns': (
              a: (
                elt: [
                  (
                    s: 'rest'
                  )
                ]
              )
            )
          },
          name: 'PUT /b/{bp}',
          rest_params: (
            method: 'PUT',
            path: '/b/{bp}',
            query_param: [
              (
                name: 'cq',
                type: (
                  primitive: 'INT',
                  source_context: (
                    end: (
                      col: 15,
                      line: 111
                    ),
                    file: 'dev/sysl/pkg/arrai/model.sysl',
                    start: (
                      col: 12,
                      line: 111
                    )
                  )
                )
              )
            ],
            url_param: [
              (
                name: 'bp',
                type: (
                  primitive: 'STRING',
                  source_context: (
                    end: (
                      col: 20,
                      line: 108
                    ),
                    file: 'dev/sysl/pkg/arrai/model.sysl',
                    start: (
                      col: 7,
                      line: 108
                    )
                  )
                )
              )
            ]
          ),
          source_context: (
            end: (
              col: 4,
              line: 114
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 8,
              line: 111
            )
          ),
          stmt: [
            (
              action: (
                action: '...'
              )
            )
          ]
        ),
        'Pizza :: Supreme -> Event': (
          name: 'Pizza :: Supreme -> Event',
          source: (
            part: ['Pizza', 'Supreme']
          ),
          source_context: (
            end: (
              col: 3,
              line: 119
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 116
            )
          ),
          stmt: [
            (
              action: (
                action: '...'
              )
            )
          ]
        )
      },
      name: (
        part: ['Pizza', 'Supreme']
      ),
      source_context: (
        end: (
          col: 9,
          line: 80
        ),
        file: 'dev/sysl/pkg/arrai/model.sysl',
        start: (
          col: 1,
          line: 80
        )
      )
    ),
    'Source': (
      attrs: {
        'description': (
          s: 'A database.\n Stores data.\n'
        ),
        'patterns': (
          a: (
            elt: [
              (
                s: 'db'
              )
            ]
          )
        )
      },
      endpoints: {
        'Read': (
          name: 'Read',
          source_context: (
            end: (
              col: 1,
              line: 24
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 21
            )
          ),
          stmt: [
            (
              ret: (
                payload: (
                  attr: (
                    modifier: {},
                    nvp: {}
                  ),
                  type: 'Source.Foo'
                )
              )
            )
          ]
        )
      },
      name: (
        part: ['Source']
      ),
      source_context: (
        end: (
          col: 10,
          line: 1
        ),
        file: 'dev/sysl/pkg/arrai/model.sysl',
        start: (
          col: 1,
          line: 1
        )
      ),
      types: {
        'Bar': (
          attrs: {
            'description': (
              s: 'A bar table.'
            )
          },
          relation: (
            attr_defs: {
              'a': (
                attrs: {
                  'description': (
                    s: 'A bar table.'
                  ),
                  'patterns': (
                    a: (
                      elt: [
                        (
                          s: 'pk'
                        )
                      ]
                    )
                  )
                },
                primitive: 'STRING',
                source_context: (
                  end: (
                    col: 24,
                    line: 15
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 13,
                    line: 15
                  )
                )
              ),
              'b': (
                attrs: {
                  'description': (
                    s: 'An optional int'
                  )
                },
                opt: {
                  (                  )
                },
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 8,
                    line: 18
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 13,
                    line: 17
                  )
                )
              ),
              'x': (
                attrs: {
                  'description': (
                    s: 'A foreign key'
                  )
                },
                source_context: (
                  end: (
                    col: 4,
                    line: 21
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 13,
                    line: 19
                  )
                ),
                type_ref: (
                  context: (
                    appname: (
                      part: ['Source']
                    ),
                    path: ['Bar']
                  ),
                  ref: (
                    path: ['Foo', 'x']
                  )
                )
              )
            },
            primary_key: (
              attr_name: ['a']
            )
          ),
          source_context: (
            end: (
              col: 4,
              line: 21
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 14
            )
          )
        ),
        'Foo': (
          attrs: {
            'description': (
              s: 'A Foo.\n Represents foo things.\n'
            )
          },
          relation: (
            attr_defs: {
              'x': (
                attrs: {
                  'description': (
                    s: 'The x value.'
                  )
                },
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 8,
                    line: 11
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 13,
                    line: 10
                  )
                )
              ),
              'y': (
                attrs: {
                  'description': (
                    s: 'A Foo.\n Represents foo things.\n'
                  )
                },
                primitive: 'INT',
                source_context: (
                  end: (
                    col: 13,
                    line: 11
                  ),
                  file: 'dev/sysl/pkg/arrai/model.sysl',
                  start: (
                    col: 13,
                    line: 11
                  )
                )
              )
            }
          ),
          source_context: (
            end: (
              col: 4,
              line: 13
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 6
            )
          )
        )
      }
    ),
    'all': (
      endpoints: {
        'all': (
          name: 'all',
          source_context: (
            end: (
              line: 127
            ),
            file: 'dev/sysl/pkg/arrai/model.sysl',
            start: (
              col: 4,
              line: 120
            )
          ),
          stmt: [
            (
              action: (
                action: 'Source'
              )
            ),
            (
              action: (
                action: 'Client'
              )
            ),
            (
              action: (
                action: 'A'
              )
            ),
            (
              action: (
                action: 'B'
              )
            ),
            (
              action: (
                action: 'C'
              )
            ),
            (
              action: (
                action: 'D'
              )
            )
          ]
        )
      },
      name: (
        part: ['all']
      ),
      source_context: (
        end: (
          line: 119
        ),
        file: 'dev/sysl/pkg/arrai/model.sysl',
        start: (
          col: 1,
          line: 119
        )
      )
    )
  }
)
