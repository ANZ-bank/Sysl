(
  anno: (
    app: {
      (
        appAnnoName: 'description',
        appAnnoValue: 'A database.\n Stores data.\n',
        appName: ['Source'],
      ),
    },
    ep: {},
    event: {},
    field: {
      (
        appName: ['Source'],
        fieldAnnoName: 'description',
        fieldAnnoValue: 'A foreign key',
        fieldName: 'x',
        typeName: 'Bar',
      ),
      (
        appName: ['Source'],
        fieldAnnoName: 'description',
        fieldAnnoValue: 'An optional int',
        fieldName: 'b',
        typeName: 'Bar',
      ),
      (
        appName: ['Source'],
        fieldAnnoName: 'description',
        fieldAnnoValue: 'The x value.',
        fieldName: 'x',
        typeName: 'Foo',
      ),
    },
    mixin: {},
    stmt: {},
    type: {
      (
        appName: ['Source'],
        typeAnnoName: 'description',
        typeAnnoValue: 'A Foo.\n Represents foo things.\n',
        typeName: 'Foo',
      ),
      (
        appName: ['Source'],
        typeAnnoName: 'description',
        typeAnnoValue: 'A bar table.',
        typeName: 'Bar',
      ),
    },
    view: {},
  ),
  app: {
    (
      appDocstring: {},
      appLongName: {},
      appName: ['A'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['B'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['C'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['Client'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['D'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['Source'],
    ),
    (
      appDocstring: {},
      appLongName: {},
      appName: ['all'],
    ),
  },
  enum: {},
  ep: {
    (
      appName: ['A'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Fetch',
      rest: {},
    ),
    (
      appName: ['B'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Fetch',
      rest: {},
    ),
    (
      appName: ['C'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Fetch',
      rest: {},
    ),
    (
      appName: ['C'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'FetchA',
      rest: {},
    ),
    (
      appName: ['C'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'FetchB',
      rest: {},
    ),
    (
      appName: ['Client'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Do',
      rest: {},
    ),
    (
      appName: ['D'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Fetch',
      rest: {},
    ),
    (
      appName: ['Source'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'Read',
      rest: {},
    ),
    (
      appName: ['all'],
      epDocstring: {},
      epEvent: {},
      epLongName: {},
      epName: 'all',
      rest: {},
    ),
  },
  event: {},
  field: {
    (
      appName: ['A'],
      fieldConstraint: (),
      fieldName: 'ax',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'FetchResponse',
    ),
    (
      appName: ['A'],
      fieldConstraint: (),
      fieldName: 'ay',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'FetchResponse',
    ),
    (
      appName: ['B'],
      fieldConstraint: (),
      fieldName: 'bx',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'FetchResponse',
    ),
    (
      appName: ['B'],
      fieldConstraint: (),
      fieldName: 'by',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'FetchResponse',
    ),
    (
      appName: ['C'],
      fieldConstraint: (),
      fieldName: 'cx',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'FetchResponse',
    ),
    (
      appName: ['C'],
      fieldConstraint: (),
      fieldName: 'cy',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'FetchResponse',
    ),
    (
      appName: ['Client'],
      fieldConstraint: (),
      fieldName: 'xx',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'Screen',
    ),
    (
      appName: ['Client'],
      fieldConstraint: (),
      fieldName: 'yy',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'Screen',
    ),
    (
      appName: ['D'],
      fieldConstraint: (),
      fieldName: 'dx',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'FetchResponse',
    ),
    (
      appName: ['D'],
      fieldConstraint: (),
      fieldName: 'dy',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'FetchResponse',
    ),
    (
      appName: ['Source'],
      fieldConstraint: (),
      fieldName: 'a',
      fieldOpt: {},
      fieldType: (
        primitive: 'STRING',
      ),
      typeName: 'Bar',
    ),
    (
      appName: ['Source'],
      fieldConstraint: (),
      fieldName: 'b',
      fieldOpt: {
        (),
      },
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'Bar',
    ),
    (
      appName: ['Source'],
      fieldConstraint: (),
      fieldName: 'x',
      fieldOpt: {},
      fieldType: '???',
      typeName: 'Bar',
    ),
    (
      appName: ['Source'],
      fieldConstraint: (),
      fieldName: 'x',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'Foo',
    ),
    (
      appName: ['Source'],
      fieldConstraint: (),
      fieldName: 'y',
      fieldOpt: {},
      fieldType: (
        primitive: 'INT',
      ),
      typeName: 'Foo',
    ),
  },
  mixin: {},
  param: {},
  src: (
    app: {
      (
        appName: ['A'],
        appSrc: (
          end: (
            line: 24,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 1,
            line: 24,
          ),
        ),
      ),
      (
        appName: ['B'],
        appSrc: (
          end: (
            line: 33,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 1,
            line: 33,
          ),
        ),
      ),
      (
        appName: ['C'],
        appSrc: (
          end: (
            line: 42,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 1,
            line: 42,
          ),
        ),
      ),
      (
        appName: ['Client'],
        appSrc: (
          end: (
            line: 71,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 1,
            line: 71,
          ),
        ),
      ),
      (
        appName: ['D'],
        appSrc: (
          end: (
            line: 61,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 1,
            line: 61,
          ),
        ),
      ),
      (
        appName: ['Source'],
        appSrc: (
          end: (
            col: 10,
            line: 1,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 1,
            line: 1,
          ),
        ),
      ),
      (
        appName: ['all'],
        appSrc: (
          end: (
            line: 80,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 1,
            line: 80,
          ),
        ),
      ),
    },
    ep: {
      (
        appName: ['A'],
        epName: 'Fetch',
        epSrc: (
          end: (
            col: 4,
            line: 29,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 25,
          ),
        ),
      ),
      (
        appName: ['B'],
        epName: 'Fetch',
        epSrc: (
          end: (
            col: 4,
            line: 38,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 34,
          ),
        ),
      ),
      (
        appName: ['C'],
        epName: 'Fetch',
        epSrc: (
          end: (
            col: 4,
            line: 57,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 52,
          ),
        ),
      ),
      (
        appName: ['C'],
        epName: 'FetchA',
        epSrc: (
          end: (
            col: 4,
            line: 47,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 43,
          ),
        ),
      ),
      (
        appName: ['C'],
        epName: 'FetchB',
        epSrc: (
          end: (
            col: 4,
            line: 52,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 47,
          ),
        ),
      ),
      (
        appName: ['Client'],
        epName: 'Do',
        epSrc: (
          end: (
            col: 4,
            line: 76,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 72,
          ),
        ),
      ),
      (
        appName: ['D'],
        epName: 'Fetch',
        epSrc: (
          end: (
            col: 4,
            line: 67,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 62,
          ),
        ),
      ),
      (
        appName: ['Source'],
        epName: 'Read',
        epSrc: (
          end: (
            col: 1,
            line: 24,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 21,
          ),
        ),
      ),
      (
        appName: ['all'],
        epName: 'all',
        epSrc: (
          end: (
            line: 88,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 81,
          ),
        ),
      ),
    },
    event: {},
    field: {
      (
        appName: ['A'],
        fieldName: 'ax',
        fieldSrc: (
          end: (
            col: 14,
            line: 30,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 30,
          ),
        ),
        typeName: 'FetchResponse',
      ),
      (
        appName: ['A'],
        fieldName: 'ay',
        fieldSrc: (
          end: (
            col: 14,
            line: 31,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 31,
          ),
        ),
        typeName: 'FetchResponse',
      ),
      (
        appName: ['B'],
        fieldName: 'bx',
        fieldSrc: (
          end: (
            col: 14,
            line: 39,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 39,
          ),
        ),
        typeName: 'FetchResponse',
      ),
      (
        appName: ['B'],
        fieldName: 'by',
        fieldSrc: (
          end: (
            col: 14,
            line: 40,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 40,
          ),
        ),
        typeName: 'FetchResponse',
      ),
      (
        appName: ['C'],
        fieldName: 'cx',
        fieldSrc: (
          end: (
            col: 14,
            line: 58,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 58,
          ),
        ),
        typeName: 'FetchResponse',
      ),
      (
        appName: ['C'],
        fieldName: 'cy',
        fieldSrc: (
          end: (
            col: 14,
            line: 59,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 59,
          ),
        ),
        typeName: 'FetchResponse',
      ),
      (
        appName: ['Client'],
        fieldName: 'xx',
        fieldSrc: (
          end: (
            col: 14,
            line: 77,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 77,
          ),
        ),
        typeName: 'Screen',
      ),
      (
        appName: ['Client'],
        fieldName: 'yy',
        fieldSrc: (
          end: (
            col: 14,
            line: 78,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 78,
          ),
        ),
        typeName: 'Screen',
      ),
      (
        appName: ['D'],
        fieldName: 'dx',
        fieldSrc: (
          end: (
            col: 14,
            line: 68,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 68,
          ),
        ),
        typeName: 'FetchResponse',
      ),
      (
        appName: ['D'],
        fieldName: 'dy',
        fieldSrc: (
          end: (
            col: 14,
            line: 69,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 14,
            line: 69,
          ),
        ),
        typeName: 'FetchResponse',
      ),
      (
        appName: ['Source'],
        fieldName: 'a',
        fieldSrc: (
          end: (
            col: 24,
            line: 15,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 13,
            line: 15,
          ),
        ),
        typeName: 'Bar',
      ),
      (
        appName: ['Source'],
        fieldName: 'b',
        fieldSrc: (
          end: (
            col: 8,
            line: 18,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 13,
            line: 17,
          ),
        ),
        typeName: 'Bar',
      ),
      (
        appName: ['Source'],
        fieldName: 'x',
        fieldSrc: (
          end: (
            col: 4,
            line: 21,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 13,
            line: 19,
          ),
        ),
        typeName: 'Bar',
      ),
      (
        appName: ['Source'],
        fieldName: 'x',
        fieldSrc: (
          end: (
            col: 8,
            line: 11,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 13,
            line: 10,
          ),
        ),
        typeName: 'Foo',
      ),
      (
        appName: ['Source'],
        fieldName: 'y',
        fieldSrc: (
          end: (
            col: 13,
            line: 11,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 13,
            line: 11,
          ),
        ),
        typeName: 'Foo',
      ),
    },
    mixin: {},
    stmt: {
      (
        appName: ['A'],
        epName: 'Fetch',
        stmtSrc: {},
      ),
      (
        appName: ['B'],
        epName: 'Fetch',
        stmtSrc: {},
      ),
      (
        appName: ['C'],
        epName: 'Fetch',
        stmtSrc: {},
      ),
      (
        appName: ['C'],
        epName: 'FetchA',
        stmtSrc: {},
      ),
      (
        appName: ['C'],
        epName: 'FetchB',
        stmtSrc: {},
      ),
      (
        appName: ['Client'],
        epName: 'Do',
        stmtSrc: {},
      ),
      (
        appName: ['D'],
        epName: 'Fetch',
        stmtSrc: {},
      ),
      (
        appName: ['Source'],
        epName: 'Read',
        stmtSrc: {},
      ),
      (
        appName: ['all'],
        epName: 'all',
        stmtSrc: {},
      ),
    },
    type: {
      (
        appName: ['A'],
        typeName: 'FetchResponse',
        typeSrc: (
          end: (
            col: 1,
            line: 33,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 29,
          ),
        ),
      ),
      (
        appName: ['B'],
        typeName: 'FetchResponse',
        typeSrc: (
          end: (
            col: 1,
            line: 42,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 38,
          ),
        ),
      ),
      (
        appName: ['C'],
        typeName: 'FetchResponse',
        typeSrc: (
          end: (
            col: 1,
            line: 61,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 57,
          ),
        ),
      ),
      (
        appName: ['Client'],
        typeName: 'Screen',
        typeSrc: (
          end: (
            col: 3,
            line: 80,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 76,
          ),
        ),
      ),
      (
        appName: ['D'],
        typeName: 'FetchResponse',
        typeSrc: (
          end: (
            col: 6,
            line: 71,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 67,
          ),
        ),
      ),
      (
        appName: ['Source'],
        typeName: 'Bar',
        typeSrc: (
          end: (
            col: 4,
            line: 21,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 14,
          ),
        ),
      ),
      (
        appName: ['Source'],
        typeName: 'Foo',
        typeSrc: (
          end: (
            col: 4,
            line: 13,
          ),
          file: 'dev/sysl/pkg/arrai/model.sysl',
          start: (
            col: 4,
            line: 6,
          ),
        ),
      ),
    },
    view: {},
  ),
  stmt: {
    (
      appName: ['A'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        payload: (
          attr: (
            modifier: {},
            nvp: {
              'dataflow': (
                d: {
                  'A.FetchResponse.ax': 'Source.Foo.x',
                  'A.FetchResponse.ay': 'Source.Foo.y',
                },
              ),
              'description': '1:1 transform',
            },
          ),
          status: 'ok',
          type: 'A.FetchResponse',
        ),
      ),
    ),
    (
      appName: ['A'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['Source'],
        epName: 'Read',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['B'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        payload: (
          attr: (
            modifier: {},
            nvp: {
              'dataflow': (
                d: {
                  'B.FetchResponse.bx': 'Source.Foo.x',
                  'B.FetchResponse.by': 'Source.Foo.y',
                },
              ),
              'description': '1:1 transform',
            },
          ),
          status: 'ok',
          type: 'B.FetchResponse',
        ),
      ),
    ),
    (
      appName: ['B'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['Source'],
        epName: 'Read',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['C'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 2,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        payload: (
          attr: (
            modifier: {},
            nvp: {
              'dataflow': (
                d: {
                  'C.FetchResponse.cx': (
                    a: ['A.FetchResponse.ax', 'B.FetchResponse.bx'],
                  ),
                  'C.FetchResponse.cy': (
                    a: ['A.FetchResponse.ay', 'B.FetchResponse.by'],
                  ),
                },
              ),
              'description': '1:1 transform',
            },
          ),
          status: 'ok',
          type: 'C.FetchResponse',
        ),
      ),
    ),
    (
      appName: ['C'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['C'],
        epName: 'FetchA',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['C'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['C'],
        epName: 'FetchB',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['C'],
      epName: 'FetchA',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        payload: (
          attr: (
            modifier: {},
            nvp: {
              'dataflow': (
                d: {
                  'C.FetchResponse.cx': 'A.FetchResponse.ax',
                  'C.FetchResponse.cy': 'A.FetchResponse.ay',
                },
              ),
              'description': '1:1 transform',
            },
          ),
          status: 'ok',
          type: 'C.FetchResponse',
        ),
      ),
    ),
    (
      appName: ['C'],
      epName: 'FetchA',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['A'],
        epName: 'Fetch',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['C'],
      epName: 'FetchB',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        payload: (
          attr: (
            modifier: {},
            nvp: {
              'dataflow': (
                d: {
                  'C.FetchResponse.cx': 'B.FetchResponse.bx',
                  'C.FetchResponse.cy': 'B.FetchResponse.by',
                },
              ),
              'description': '1:1 transform',
            },
          ),
          status: 'ok',
          type: 'C.FetchResponse',
        ),
      ),
    ),
    (
      appName: ['C'],
      epName: 'FetchB',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['B'],
        epName: 'Fetch',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Client'],
      epName: 'Do',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        payload: (
          attr: (
            modifier: {},
            nvp: {
              'dataflow': (
                d: {
                  'Client.Screen.xx': 'D.FetchResponse.dx',
                  'Client.Screen.yy': 'D.FetchResponse.dy',
                },
              ),
              'description': '1:1 transform',
            },
          ),
          status: 'ok',
          type: 'Client.Screen',
        ),
      ),
    ),
    (
      appName: ['Client'],
      epName: 'Do',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['D'],
        epName: 'Fetch',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['D'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 2,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        payload: (
          attr: (
            modifier: {},
            nvp: {
              'dataflow': (
                d: {
                  'D.FetchResponse.dx': (
                    a: ['A.FetchResponse.ax', 'C.FetchResponse.cx'],
                  ),
                  'D.FetchResponse.dy': (
                    a: ['A.FetchResponse.ay', 'C.FetchResponse.cy'],
                  ),
                },
              ),
              'description': '1:1 transform',
            },
          ),
          status: 'ok',
          type: 'D.FetchResponse',
        ),
      ),
    ),
    (
      appName: ['D'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['A'],
        epName: 'Fetch',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['D'],
      epName: 'Fetch',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: (
        appName: ['C'],
        epName: 'Fetch',
      ),
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['Source'],
      epName: 'Read',
      stmtAction: {},
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: (
        payload: (
          attr: (
            modifier: {},
            nvp: {},
          ),
          status: 'ok',
          type: 'Source.Foo',
        ),
      ),
    ),
    (
      appName: ['all'],
      epName: 'all',
      stmtAction: 'A',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 2,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['all'],
      epName: 'all',
      stmtAction: 'B',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 3,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['all'],
      epName: 'all',
      stmtAction: 'C',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 4,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['all'],
      epName: 'all',
      stmtAction: 'Client',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 1,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['all'],
      epName: 'all',
      stmtAction: 'D',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 5,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
    (
      appName: ['all'],
      epName: 'all',
      stmtAction: 'Source',
      stmtAlt: {},
      stmtCall: {},
      stmtCond: {},
      stmtForeach: {},
      stmtGroup: {},
      stmtIndex: 0,
      stmtLoop: {},
      stmtLoopN: {},
      stmtParent: {},
      stmtRet: {},
    ),
  },
  table: {
    (
      appName: ['Source'],
      pk: {},
      typeName: 'Foo',
    ),
    (
      appName: ['Source'],
      pk: ['a'],
      typeName: 'Bar',
    ),
  },
  tag: (
    app: {
      (
        appName: ['Source'],
        appTag: 'db',
      ),
    },
    ep: {},
    event: {},
    field: {
      (
        appName: ['Source'],
        fieldName: 'a',
        fieldTag: 'pk',
        typeName: 'Bar',
      ),
    },
    mixin: {},
    stmt: {},
    type: {},
    view: {},
  ),
  type: {
    (
      appName: ['A'],
      typeDocstring: {},
      typeName: 'FetchResponse',
      typeOpt: {},
    ),
    (
      appName: ['B'],
      typeDocstring: {},
      typeName: 'FetchResponse',
      typeOpt: {},
    ),
    (
      appName: ['C'],
      typeDocstring: {},
      typeName: 'FetchResponse',
      typeOpt: {},
    ),
    (
      appName: ['Client'],
      typeDocstring: {},
      typeName: 'Screen',
      typeOpt: {},
    ),
    (
      appName: ['D'],
      typeDocstring: {},
      typeName: 'FetchResponse',
      typeOpt: {},
    ),
    (
      appName: ['Source'],
      typeDocstring: {},
      typeName: 'Bar',
      typeOpt: {},
    ),
    (
      appName: ['Source'],
      typeDocstring: {},
      typeName: 'Foo',
      typeOpt: {},
    ),
  },
  view: {},
)
