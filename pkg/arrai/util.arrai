# A collection of helper functions for arr.ai.
#
# If generally useful, these should gradually migrate to a more standard library.

# TODO: this should be part of stdlib
let rec trimWhitespace = \str
    let prefix = //seq.trim_prefix(' ');
    let suffix = //seq.trim_suffix(' ');
    let trimmed = prefix(suffix(str));
    cond trimmed {
        (str): str,
        _: trimWhitespace(trimmed)
    }
;

# Trims trailing whitespace from each line of a string.
let trimLines =
    let newlinesRe = //re.compile(`\n\s+$`);
    let re = //re.compile(`^(.*[^\s])\s*$`);
    \str
        let str = newlinesRe.sub('\n', str);
        $`${//seq.split('\n', str) >> cond re.match(.) {[[_, s]]: s, _: ''}::\n}`
;

# TODO: Handle type without app reference
let typeGrammar = {://grammar.lang.wbnf[grammar]:
    types -> (app=([^\.]+) ".")? type=([^\.]+):".";
:};

let unpackType = \type (
    cond type {
        (''): (app: '', type: '', field: ''),
        _: (//grammar -> .parse(typeGrammar, 'types', type))
            ->
            let app = trimWhitespace((.).app?.''?:'' rank (:.@));
            let typeCount = .type count;
            cond (typeCount) {
                (1): (
                    :app,
                    type : .type >> trimWhitespace(.'' rank (:.@)),
                    field: ''
                ),
                _: (
                    :app,
                    type : .type where .@ != typeCount - 1 >> trimWhitespace(.'' rank (:.@)),
                    field: trimWhitespace(.type(typeCount-1).'' rank (:.@))
                )
            }
    }
);

let packType = \(app: appName, type: typeSeq, field: fieldName) (
    cond fieldName {
        (''): cond appName {
                (''): //seq.join('.', typeSeq),
                _: //seq.join('.', [appName] ++ typeSeq),
            },
        _: //seq.join('.', [appName] ++ typeSeq ++ [fieldName]),
    }
);

# isValidIdentifier checks whether the identifier name is valid.
let isValidIdentifier = \identifier
    # InvalidIdentifiers that would be appended by underscore('_') when used as an identifier in the ingested SQL
    # for instance  a column "Int64 INT64" becomes _Int64 <: int [name="Int64"].
    # List is still fairly limited but more keywords could be added as we go.
    let invalidIdentifiers = { "as", "if", "else",
        "any", "int", "int32", "int64", "float", "float32", "float64", "decimal", "string", "bool", "date", "datetime", "bytes"
    };

    # sysl is largely case insensitive so lowercase the identifier before comparison
    # taken from pkg/grammar/SyslLexer.g4
    let regex = //re.compile("('%'[0-9a-fA-F][0-9a-fA-F])*[a-zA-Z_]([-a-zA-Z0-9_]|('%'[0-9a-fA-F][0-9a-fA-F]))*");
    !(//str.lower(identifier) <: invalidIdentifiers) && regex.match(identifier);

# resolveValidIdentifier resolves the invalid identifier name.
let resolveValidIdentifier = \identifier
    cond {
        !isValidIdentifier(identifier): '_' ++ identifier,
        _: identifier
    };

let nativeDataTypes = {
    'int', 'int32', 'int64', 'string', 'any', 'float', 'float32', 'float64',
    'date', 'bool', 'decimal', 'datetime', 'bytes'
};

let appToParts = \appName //seq.split('::', appName) >> trimWhitespace(.);

# `dictMergeResolve` recursively merges two dictionaries into a single dictionary, combining
# values that themselves are dictionaries. In instances where both dictionaries define the same key
# the `resolve` function is called.
# `a` is the first dictionary to merge.
# `b` is the second dictionary to merge.
# `resolve` is a function with signature `\x \y \k` where `x` and `y` are dictionaries that both
# contain key `k`, the result of the function being the value to set for the merged result.
let rec dictMergeResolve = \a \b \resolve
    let isDict = \x cond x {{_: ...}: true};
    let keys = (a => .@) | (b => .@);
    keys => (@:., @value:
        let has_a = . <: (a => .@);
        let has_b = . <: (b => .@);
        cond {
            has_a && has_b && isDict(a(.)) && isDict(b(.)): dictMergeResolve(a(.), b(.), resolve),
            has_a && has_b: resolve(a, b, .),
            has_a: a(.),
            _: b(.),
        }
    );

# `dictMerge` recursively merges two dictionaries into a single dictionary, combining values that
# themselves are dictionaries. In instances where both dictionaries define the same key and the
# values present are not themselves dictionaries to be merged, the value from dictionary `b`
# overwrites the values from dictionary `a`.
# `dictMerge({1:{1:2}}, {1:{2:3}})` returns `{1:{1:2, 2:3}}`
# `a` is the first dictionary to merge.
# `b` is the second dictionary to merge.
let dictMerge = \a \b
    dictMergeResolve(a, b, \_ \y \k y(k));

(
    :unpackType,
    :packType,
    :trimWhitespace,
    :trimLines,
    :isValidIdentifier,
    :resolveValidIdentifier,
    :nativeDataTypes,
    :appToParts,
    :dictMergeResolve,
    :dictMerge,
)
