# A collection of helper functions for arr.ai.
#
# If generally useful, these should gradually migrate to a more standard library.

# Invokes a macro on a string as if it were source code at parsing time.
let invokeMacro = \macro \s
    macro -> (//dict(.@transform) >>> \rule \fn
        fn(//grammar.parse(.@grammar, rule, s))).@value
;

# Transforms an AST into a simple tuple of its values.
# Useful for the @transform of a flat grammar.
let simpleTransform = \ast
    let d = //dict(ast) >> \term cond term {('':value, ...): value, _: {}};
    //tuple(d where .@value)
;

# Sequentially applies `fn(accumulator, i)` for each `i` in `arr`. The `accumulator` is initialised
# to `val`, and updated to the result of `fn` after each invocation.
# Returns the final accumulated value.
let rec reduce = \arr \fn \val
    cond arr {
        [head, ...]:
            let tail = -1\(arr without (@:0, @item:head));
            reduce(tail, fn, fn(val, head)),
        _: val,
    }
;

# Performs `reduce` once on `arr`, and once for each array output of `fn`. Accumulates to the same
# value across all invocations.
let reduceFlat = \arr \fn \val
    reduce(arr, \z \i reduce(i, fn, z), val)
;

let remOffset = \word word rank (:.@);

# TODO: this should be part of stdlib
let rec trimWhitespace = \str
    let prefix = //seq.trim_prefix(' ');
    let suffix = //seq.trim_suffix(' ');
    let trimmed = prefix(suffix(str));
    cond trimmed {
        (str): str,
        _: trimWhitespace(trimmed)
    }
;


# TODO: Handle type without app reference
let typeGrammar = {:
        //grammar.lang.wbnf[grammar]:
        types -> (app=([^\.]+) ".")? type=([^\.]+):".";
    :};
let unpackType = \type (
    cond type {
        (''): (app: '', type: '', field: ''),
        _: (//grammar -> .parse(typeGrammar, 'types', type))
            ->
            # TODO: remove once .field?: is fixed
            let t = .;
            let app = trimWhitespace(remOffset(t.app?.''?:''));
            let typeCount = .type count;
            cond (typeCount) {
                (1): (
                    :app,
                    type : .type >> trimWhitespace(remOffset(.'')),
                    field: ''
                ),
                _: (
                    :app,
                    type : .type where .@ != typeCount - 1 >> trimWhitespace(remOffset(.'')),
                    field: trimWhitespace(remOffset(.type(typeCount-1).''))
                )
            }
    }
);

let packType = \(app: appName, type: typeSeq, field: fieldName) (
    cond fieldName {
        (''): //seq.join('.', [appName] ++ typeSeq),
        _: //seq.join('.', [appName] ++ typeSeq ++ [fieldName]),
    }
)
;

(
    :invokeMacro,
    :simpleTransform,
    :reduce,
    :reduceFlat,
    :unpackType,
    :packType,
    :remOffset,
    :trimWhitespace
)
