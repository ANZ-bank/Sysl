package mermaidsequencediagram

import (
	"errors"
	"fmt"

	"github.com/anz-bank/sysl/pkg/sysl"
)

const projDir = "../../"

func GenerateMermaidSequenceDiagram(m *sysl.Module, appname string, epname string,
	previousapp string, indent int, thestart bool) (string, error) {
	var result string
	if thestart {
		result = "%% AUTOGENERATED CODE -- DO NOT EDIT!\n\nsequenceDiagram\n"
		if err := validAppnameAndEndpoint(m, appname, epname); err != nil {
			return "", err
		}
	}
	statements := m.Apps[appname].Endpoints[epname].GetStmt()
	for _, statement := range statements {
		switch c := statement.Stmt.(type) {
		case *sysl.Statement_Call:
			if thestart {
				result += fmt.Sprintf(" %s->>%s: %s\n", previousapp, appname, epname)
			}
			nextapp := c.Call.Target.Part[0]
			nextep := c.Call.Endpoint
			result += callStatement(appname, nextep, nextapp, indent)
			previous := appname
			out, err := GenerateMermaidSequenceDiagram(m, nextapp, nextep, previous, indent, false)
			if err != nil {
				return "", err
			}
			result += out
		case *sysl.Statement_Ret:
			retep := c.Ret.Payload
			result += retStatement(appname, retep, previousapp, indent, thestart)
		default:
			panic("Unrecognised statement type")
		}
	}
	return result, nil
}

func validAppnameAndEndpoint(m *sysl.Module, appname string, epname string) error {
	if _, ok := m.Apps[appname]; !ok {
		return errors.New("invalid app name")
	}
	if _, ok := m.Apps[appname].Endpoints[epname]; !ok {
		return errors.New("invalid endpoint")
	}
	return nil
}

func callStatement(appname string, epname string, nextapp string, indent int) string {
	var out = addIndent(indent)
	out += fmt.Sprintf("%s->>+%s: %s\n", appname, nextapp, epname)
	return out
}

func retStatement(appname string, epname string, previousapp string, indent int, thestart bool) string {
	var out = addIndent(indent)
	if thestart {
		out += fmt.Sprintf("%s-->>%s: %s\n", appname, previousapp, epname)
	} else {
		out += fmt.Sprintf("%s-->>-%s: %s\n", appname, previousapp, epname)
	}
	return out
}

func addIndent(indent int) string {
	var out string
	for i := 0; i < indent; i++ {
		out += " "
	}
	return out
}
