.import stmt.wbnf
.import endpoints.wbnf
.import views.wbnf

// Sysl grammar

sysl_file -> (import | EOL)* (application | EOL)+
           | (import | EOL)+ (application | EOL)*;


// -------------- Imports --------------- //
import  -> "import"  prefix=("//"|"/")?
            PATH ( "as"  reference)? ("~" mode=NAME)? COMMENT_NO_NL?;


// -------------- Events --------------- //

event  ->  "<->" APPNAME params? attribs? ":"
        ( WRAPPED_SHORTCUT | %!InlineCommentIndent(stmt));
subscribe  ->  APPNAME "->" APPNAME params? attribs? ":"
        ( WRAPPED_SHORTCUT | %!InlineCommentIndent(stmt));

// -------------- Enums --------------- //

enum  -> "!enum" name=NAME attribs? ":"
         (WRAPPED_SHORTCUT| %!InlineCommentIndent(enumeration)) {
        enumeration -> name=NAME (":" | "=") value=(DIGITS | "0") COMMENT_NO_NL*;
};

// -------------- Mixin --------------- //

mixin -> "-|>" APPNAME;

// -------------- Applications --------------- //
application ->  APPNAME QSTRING?
        attribs? ":"  %!InlineCommentIndent(app_decl) EOL?;

app_decl   -> annotation
            | COMMENT_NO_NL
            | WRAPPED_SHORTCUT
            | type_decl
            | endpoint
            | event
            | subscribe
            | view
            | mixin;


// -------------- Types --------------- //

type_decl -> table | facade | alias | union | enum;

table -> mode=("!table"|"!type") NAME attribs?  ":"
         (WRAPPED_SHORTCUT | %!InlineCommentIndent(table_row)) {
         table_row -> table_field
                    | annotation
                    | table
                    | SHORTCUT;
         
         table_field -> field_with_default_value optional="?"? attribs? (":" annotations)?;
         
         field_with_default_value -> NAME array_size? field_number=("=" \d+)? "<:"
                                    (
                                        field_type
                                        | %!InlineCommentIndent(field | unspecified_type=NAME)
                                    )
                                    QSTRING?;
     };

facade -> "!wrap" NAME  ":"
     %!InlineCommentIndent(("!table"|"!type"|"!union") NAME inplace_table_def?){
            inplace_table_def -> ":"  %!InlineCommentIndent(NAME attribs?);
        };

alias -> "!alias" NAME attribs?  ":"
        (COMMENT_NO_NL? indented_alias_def | inline_alias_def) {
        inline_alias_def -> (annotation COMMENT_NO_NL?)*
                            (collection_type | type_spec) COMMENT_NO_NL?;

        indented_alias_def -> (
                                annotations INDENT_SEP
                                | NEWLINE_WITH_COMMENT+ INDENT
                              )
                              (collection_type | type_spec) COMMENT_NO_NL?
                              (
                                  INDENT_SEP
                                    (
                                        annotation COMMENT_NO_NL?
                                        | COMMENT_NO_NL
                                    ):INDENT_SEP
                              )?;
};

union -> "!union" NAME attribs?  ":"
    (    WRAPPED_SHORTCUT
         | %!InlineCommentIndent(user_defined_type=NAME | annotation | SHORTCUT)
    );

collection_type -> ("set"|"sequence") "of" type_spec;


// -------------- Common Rules --------------- //
attribs     ->  "[" @:"," "]"
             > pattern=("~" NAME:"+")
             | attr=(NAME "=" ( array_of_array | array_of_strings | QSTRING));
array_of_strings -> "[" (QSTRING:",")? "]";
array_of_array   -> "[" (array_of_strings:",")? "]";

array_size -> "(" min=("0"|DIGITS) ".." max=DIGITS? ")";

annotation -> "@" var_name=([a-zA-Z_][-\w.]*) "=" value=(QSTRING | array_of_strings | multi_line_docstring);

annotations -> %!Indented(annotation);

multi_line_docstring -> ":" %!InlineCommentIndent("|" TEXT);

http_path_var_with_type -> "{" var=(NAME | DIGITS) "<:" type=(NativeDataTypes | reference) "}";

http_path_part  ->  (NAME | DIGITS | [-._~] | ("%" [0-9a-fA-F]{2}))+ { .wrapRE -> /{()};};
http_path -> "/" ((http_path_part | http_path_var_with_type):"/",)?;

type_spec -> (NativeDataTypes | reference)
             SizeSpec=("(" \d+ (array=".."|sized=".")? \d* ")")?;

// -------------- Tokens --------------- //
NAME    -> [a-zA-Z_][-a-zA-Z0-9_]*;
PATH    -> /{[a-zA-Z0-9._-]+}:"/";
DIGITS -> [1-9][0-9]*;
TEXT -> [^\n]+;
TEXT_LINE -> /{\s* ( [^\s:(] [^(#\r\n:]* [^#\s\r\n(:] )};
APPNAME -> (pkg=@):"." > (app=@):"::" > APPNAME_PART;
APPNAME_PART -> (TEXT_WITH_WHITESPACE | QSTRING)+;
TEXT_WITH_WHITESPACE -> /{[a-zA-Z_][-\w]*(?:[-\t\_]*\w+)*};
PREDICATE -> [^\n:]+;
SHORTCUT -> "...";
WRAPPED_SHORTCUT -> COMMENT* \n* SHORTCUT COMMENT_NO_NL?;
HTTP_VERBS -> /{\b(GET | POST | DELETE | PUT | PATCH)\b};
NativeDataTypes -> /{\b(int32 | int64 | int |
                float | string | datetime | date |
                bool | decimal)\b};

reference ->  pkg=(NAME:"::" ".")? APPNAME;

COMMENT_NO_NL -> "#" [^\n]*;
COMMENT -> COMMENT_NO_NL /{\r?\n};
EOL     -> (COMMENT+ | [\_\t]*\n);
QSTRING -> /{ " (?: \\. | [^\\"] )* "
           | ' (?: \\. | [^\\'] )* '
           };

.wrapRE -> /{(\n (?:[\_\t]+ \n)*)+} | \n+ | \s+ | /{[\_\t]*(?i:())[\_\t]*};

INDENT      -> %level="" \s+;
INDENT_SEP  -> NEWLINE_WITH_COMMENT %level;
NEWLINE_WITH_COMMENT ->
            /{(\n (?:[\_\t]+ \n)*)+}:([\_\t]* COMMENT_NO_NL);

.macro InlineCommentIndent(child) {
    COMMENT_NO_NL? %!Indented(child)
}

.macro Indented(child) {
    NEWLINE_WITH_COMMENT
    level=INDENT (child COMMENT_NO_NL? | COMMENT_NO_NL):INDENT_SEP
}
