let spannerType = \(:fieldType, :fieldConstraint, :patterns, ...)
    let len = cond fieldConstraint where .@item.length?:{} {
        [t]: t.length.max?:{},
    };
    let rec type = \fieldType
        cond fieldType {
            [t]: $`ARRAY<${type(t)}>`,
            {t}: $`ARRAY<${type(t)}>`,
            'BOOL': 'BOOL',
            'INT': 'INT64',
            'FLOAT': 'FLOAT64',
            'BYTES': $`BYTES${cond len {'': '', s: $`(${s})`}}`,
            'STRING': $`STRING${cond len {'': '', s: $`(${s})`}}`,
            'DATE': 'DATE',
            'DATETIME': 'TIMESTAMP',
            'timestamp': 'TIMESTAMP',
            _: fieldType
        }
    ;
    type(fieldType)
;

# Grammar for parsing index annotation strings.
let ixGrammar = {://grammar.lang.wbnf:
    index -> col+;
    col   -> name=/{[^,(]+} order? ","?;
    order -> "(" val=("asc" | "desc") ")";
:};
let ixTx = (index: \ast ast.col >> (name: .name.'', order: //str.upper((.).order?.val.'':{})));
let ixParse = //{/pkg/arrai/util}.invokeMacro((@grammar: ixGrammar, @transform: ixTx));

# Returns an array of indexes defined on the type.
let indexes = \type
    type.typeAnnotations('indexes')?:{} >> .a.elt >> (
        name: //seq.split(':', .(0).s)(1),
        key_parts: ixParse(//seq.split(':', .(1).s)(1)),
    )
;

# Returns a representation of the position of something with sourceContext to orderby.
let pos = \(start: (:line, :col), ...) [line, col];

# Returns the primitive type of a type reference (or just the type if it's primitive).
let resolveType = \m \f cond {
    f.fk: (m.fields <&> {f.fk} => .fieldType) single,
    _: f.fieldType
};

# Transforms a relational Sysl model to a DDL model.
let toDdl = \m
    let dbs = m.apps where 'db' <: .appPatterns;
    let fields = dbs <&> m.types <&> m.fields;
    fields nest ~|appName|tables =>
        . +> (tables: .tables nest ~|typeName,typeAnnotations,typeSourceContext|fields =>
            . +> (
                fields: .fields => . +> (fieldType: resolveType(m, .)),
                indexes: indexes(.),
            )
        )
;

let tableName = //seq.sub(' ', '_');
let dbName = \. //str.lower(tableName(.));

# Transforms a DDL structure into a Spanner DDL string.
# TODO? CREATE DATABASE ${dbName(.appName)};
let writeDdl = \ddl $`
    ${ddl orderby .appName >> $`
        ${.tables orderby pos(.typeSourceContext) >> 
            let typeName = tableName(.typeName);
            let pks = .fields where .pk orderby pos(.fieldSourceContext);
            let fks = .fields where .fk orderby pos(.fieldSourceContext);
            $`
                CREATE TABLE ${typeName} (
                    ${.fields orderby pos(.fieldSourceContext) >> $`
                        ${.fieldName} ${spannerType(.)}${
                            cond {!.opt: ' NOT NULL'}
                        },
                    `::\i}
                    ${cond {fks: fks >> $`
                        FOREIGN KEY (${.fieldName}) REFERENCES ${tableName(.fk.typeName)} (${.fk.fieldName})
                    `}::,\i}
                )${cond {pks: ' '++$` PRIMARY KEY (${pks >> .fieldName::, })`}};
                ${.indexes >> $`CREATE INDEX ${.name} ON ${typeName}(${
                    .key_parts >> $`${.name }${cond {.order: ' '++.order}}`
                ::, });`::\i:\n}
            `::\i}
    `::\i}
`;

# Trim trailing whitespace.
let trim = \str
    let re = //re.compile(`^(.*[^\s])\s*$`);
    $`${//seq.split('\n', str) >> cond re.match(.) {[[_, s]]: s, _: ''}::\n}`;

# Transforms a relational Sysl model to a DDL file.
let export = \m
    let ddl = toDdl(m);
    trim(writeDdl(ddl))
;

# Loads and transforms a Sysl model to a DDL file.
let exportFile = \syslPath
    let sysl = //{//pkg/arrai/sysl.arrai};
    export(sysl.normalize(sysl.load(syslPath)))
;

(
    :toDdl,
    :writeDdl,
    :export,
    :exportFile,
)
