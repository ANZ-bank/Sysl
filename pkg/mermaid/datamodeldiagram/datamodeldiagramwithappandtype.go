package datamodeldiagram

import (
	"fmt"
	"github.com/anz-bank/sysl/pkg/mermaid"
	"github.com/anz-bank/sysl/pkg/sysl"
	"github.com/anz-bank/sysl/pkg/syslwrapper"
	"strings"
)

func GenerateDataModelDiagramWithAppAndType(m *sysl.Module, appName string, typeName string) (string, error) {
	mapper := syslwrapper.MakeAppMapper(m)
	mapper.IndexTypes()
	mapper.ConvertTypes()
	return generateDataModelDiagramWithAppAndTypeHelper(mapper.SimpleTypes, appName, typeName, &[]externalLink{}, &[]string{})
}

func generateDataModelDiagramWithAppAndTypeHelper(simpleTypes map[string]*syslwrapper.Type,
	appName string, typeName string, externalLinks *[]externalLink, appTypes *[]string) (string, error) {
	var result string
	appType1 := fmt.Sprintf("%s_%s", appName, typeName)
	result = "%% AUTOGENERATED CODE -- DO NOT EDIT!\n\nclassDiagram\n"
	for appType, value := range simpleTypes {
		switch value.Type {
		case "relation", "tuple":
			printProperties(value.Properties, appType, externalLinks)
		case "enum":
			printEnum(value.Enum)
		case "map":
			printMap(value.Properties, appType, value.PrimaryKey, externalLinks)
		default:
			panic("Unrecognised type")
		}
	}
	getRelatedTypes(appType1, *externalLinks, appTypes)
	for _, appType := range *appTypes {
		appType = replaceColon(appType)
		typeValue := simpleTypes[appType]
		result += fmt.Sprintf(" class %s {\n", mermaid.CleanString(appType))
		switch typeValue.Type {
		case "relation", "tuple":
			result += printProperties(typeValue.Properties, appType, externalLinks)
		case "enum":
			result += printEnum(typeValue.Enum)
		case "map":
			result += printMap(typeValue.Properties, appType, typeValue.PrimaryKey, externalLinks)
		default:
			result += ""
		}
		result += " }\n"
	}
	return result, nil
}

func replaceColon(appType string) string {
	return strings.ReplaceAll(appType, "_", ":")
}

func getRelatedTypes(appType string, externalLinks []externalLink, appTypes *[]string) {
	if !appTypesContain(*appTypes, appType) {
		*appTypes = append(*appTypes, appType)
	}
	for _, value := range externalLinks {
		if appType == value.secondType {
			getRelatedTypes(value.firstType, externalLinks, appTypes)
		}
	}
}

func appTypesContain(f []string, s string) bool {
	for _, a := range f {
		if a == s {
			return true
		}
	}
	return false
}
