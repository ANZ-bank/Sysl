package mermaid

import (
	"testing"

	"github.com/alecthomas/assert"
	"github.com/anz-bank/sysl/pkg/parse"
	"github.com/anz-bank/sysl/pkg/syslutil"
	"github.com/spf13/afero"
)

func TestBadInputsToGenerateMermaidIntegrationDiagram(t *testing.T) {
	t.Parallel()
	appname := "wrongname"
	m, err := parse.NewParser().Parse("demo/simple/sysl-sd.sysl",
		syslutil.NewChrootFs(afero.NewOsFs(), projDir))
	if err != nil {
		t.Error(err)
	}
	r, err := GenerateMermaidIntegrationDiagram(m, appname)
	assert.NotNil(t, m)
	assert.Empty(t, r)
	assert.Error(t, err)
}

func TestGenerateMermaidIntegrationDiagram(t *testing.T) {
	t.Parallel()
	m, err := parse.NewParser().Parse("demo/simple/sysl-sd.sysl",
		syslutil.NewChrootFs(afero.NewOsFs(), projDir))
	if err != nil {
		t.Error(err)
	}
	r, err := GenerateMermaidIntegrationDiagram(m, "WebFrontend")
	assert.NotNil(t, m)
	assert.NotNil(t, r)
	assert.Nil(t, err)
	expected := `%% AUTOGENERATED CODE -- DO NOT EDIT!

graph TD
 WebFrontend --> Api
 Api --> Database
`
	assert.Equal(t, expected, r)
}

func TestGenerateMermaidIntegrationDiagram2(t *testing.T) {
	t.Parallel()
	m, err := parse.NewParser().Parse("demo/simple/sysl-sd2.sysl",
		syslutil.NewChrootFs(afero.NewOsFs(), projDir))
	if err != nil {
		t.Error(err)
	}
	r, err := GenerateMermaidIntegrationDiagram(m, "WebFrontend")
	assert.NotNil(t, m)
	assert.NotNil(t, r)
	assert.Nil(t, err)
	expected := `%% AUTOGENERATED CODE -- DO NOT EDIT!

graph TD
 WebFrontend --> Api
 Api --> Database
`
	assert.Equal(t, expected, r)
}
