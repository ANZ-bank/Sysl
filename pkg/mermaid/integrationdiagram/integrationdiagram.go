package integrationdiagram

import (
	"errors"
	"fmt"

	"github.com/anz-bank/sysl/pkg/sysl"
)

const projectDir = "../../../"

type integrationPair struct {
	firstApp, secondApp string
}

func GenerateIntegrationDiagram(m *sysl.Module, appName string) (string, error) {
	return generateIntegrationDiagramHelper(m, appName, &[]integrationPair{}, true)
}

func generateIntegrationDiagramHelper(m *sysl.Module, appName string,
	integrationPairs *[]integrationPair, theStart bool) (string, error) {
	var result string
	if theStart {
		result = "%% AUTOGENERATED CODE -- DO NOT EDIT!\n\ngraph TD\n"
		if err := isValidAppName(m, appName); err != nil {
			return "", err
		}
	}
	endPoints := m.Apps[appName].Endpoints
	for _, value := range endPoints {
		statements := value.Stmt
		result += printIntegrationDiagramStatements(m, statements, appName, integrationPairs)
	}
	return result, nil
}

func printIntegrationDiagramStatements(m *sysl.Module, statements []*sysl.Statement,
	appName string, integrationPairs *[]integrationPair) string {
	var result string
	for _, statement := range statements {
		switch c := statement.Stmt.(type) {
		case *sysl.Statement_Call:
			nextApp := c.Call.Target.Part[0]
			pair := integrationPair{appName, nextApp}
			if !integrationPairsContain(*integrationPairs, pair) {
				*integrationPairs = append(*integrationPairs, pair)
				result += fmt.Sprintf(" %s --> %s\n", appName, nextApp)
				out, err := generateIntegrationDiagramHelper(m, nextApp, integrationPairs, false)
				if err != nil {
					panic("Error in generating integration diagram; check if app name is correct")
				}
				result += out
			}
		case *sysl.Statement_Group:
			result += printIntegrationDiagramStatements(m, c.Group.Stmt, appName, integrationPairs)
		case *sysl.Statement_Cond:
			result += printIntegrationDiagramStatements(m, c.Cond.Stmt, appName, integrationPairs)
		case *sysl.Statement_Loop:
			result += printIntegrationDiagramStatements(m, c.Loop.Stmt, appName, integrationPairs)
		case *sysl.Statement_LoopN:
			result += printIntegrationDiagramStatements(m, c.LoopN.Stmt, appName, integrationPairs)
		case *sysl.Statement_Foreach:
			result += printIntegrationDiagramStatements(m, c.Foreach.Stmt, appName, integrationPairs)
		case *sysl.Statement_Action:
			result += ""
		case *sysl.Statement_Ret:
			result += ""
		default:
			panic("Unrecognised statement type")
		}
	}
	return result
}

func isValidAppName(m *sysl.Module, appName string) error {
	if _, ok := m.Apps[appName]; !ok {
		return errors.New("invalid app name")
	}
	return nil
}

func integrationPairsContain(i []integrationPair, ip integrationPair) bool {
	for _, a := range i {
		if a == ip {
			return true
		}
	}
	return false
}
