package main

import (
	"context"
	"os"
	"time"

	"github.service.anz/sysl/server-lib/common"
	"github.service.anz/sysl/server-lib/config"
	"github.service.anz/sysl/server-lib/core"
	"github.service.anz/sysl/server-lib/logging"

	{{service_pkg.name}} {{service_pkg.url}}
	{{service_pkg.impl.name}} {{service_pkg.impl.url}}

	"github.com/prometheus/client_golang/prometheus"
	"github.com/sirupsen/logrus"
)

// Simple example of using the server-lib codegen
// They codegenerate .go files which describe interfacing and server routing based on a model.
// Business logic is implemented as external functions which map to function calls in the service handling interface.
func main() {
	// logconfig
	logConfig := config.LogConfig{
		Level:        logrus.InfoLevel,
		Format:       "color",
		ReportCaller: false,
	}

	// library config
	libraryConfig := config.LibraryConfig{
		Log:       logConfig,
		Profiling: true,
	}

	// logging setup
	logger, err := logging.Logger(os.Stdout, &logConfig)
	if err != nil {
		logger.Fatalf("Invalid logger: %s\n", err.Error())
	}

	ctx := common.LoggerToContext(context.Background(), logger, nil)

	// running server on localhost:{{service_pkg.endpoint.port}}
	serverConfig := config.CommonHTTPServerConfig{
		Common: config.CommonServerConfig{
			HostName: "localhost",
			Port:     {{service_pkg.endpoint.port}},
			TLS:      nil,
		},
		BasePath:     "/",
		ReadTimeout:  1 * time.Second,
		WriteTimeout: 2 * time.Second,
	}

	// running admin server on localhost:{{service_pkg.endpoint.adminPort}}
	adminServerConfig := config.CommonHTTPServerConfig{
		Common: config.CommonServerConfig{
			HostName: "localhost",
			Port:     {{service_pkg.endpoint.adminPort}},
			TLS:      nil,
		},
		BasePath:     "/",
		ReadTimeout:  1 * time.Second,
		WriteTimeout: 2 * time.Second,
	}

	// service configuration
	serviceServiceInterface := {{service_pkg.impl.name}}.ServiceInterface{}
	serviceCallback := {{service_pkg.impl.name}}.Callback{}
	serviceServiceHandler := {{service_pkg.name}}.NewServiceHandler(serviceCallback, &serviceServiceInterface)
	serviceServiceRouter := {{service_pkg.name}}.NewServiceRouter(serviceCallback, serviceServiceHandler)

	// rest handler setup
	restHandler := {{service_pkg.impl.name}}.RestHandler{}
	restHandler.Router = append(restHandler.Router, serviceServiceRouter)
	restHandler.MAdminServerConfig = &adminServerConfig
	restHandler.ServerConfig = &serverConfig
	restHandler.MLibraryConfig = &libraryConfig

	// prometheus monitoring
	prometheusRegistry := prometheus.NewRegistry()

	// server configuration setup and run here
	err = core.Server(ctx, "example", restHandler, nil, logger, prometheusRegistry, nil)
	if err != nil {
		logger.Fatalln(err)
	}
}
