# spanner ddl grammar
# CREATE DATABASE statements are parsed to avoid errors but ignore by the modelling functions
let grammar = {://grammar.lang.wbnf:
ddl                 -> stmt=(create_database|create_table|create_index|create_sequence|create_function|create_trigger|alter_table|drop_table|drop_index):";" ";"? \s*;

create_database     -> "CREATE" "DATABASE" database=([a-z][0-9a-z_]*[0-9a-z]);

create_table        -> "CREATE" "TABLE" table_name "("(
                              attr=(column_name attr_type pk?)
                            | table_constraint
                            | pk "(" key_part ")"
                        ):"," ","? ")";
table_constraint    -> ("CONSTRAINT" constraint_name)? (unique | fk);
unique              -> "UNIQUE" "(" column_name:"," ")";
fk                  -> "FOREIGN KEY" "(" column_name:"," ")" "REFERENCES" foreign=(table_name "(" column_name:"," ")");
on_delete           -> CASCADE   = "CASCADE"
                     | NO_ACTION = "NO" "ACTION";

create_index        -> "CREATE" unique=("UNIQUE")? "INDEX" index_name "ON" table_name "(" key_part ")";

create_sequence     -> "CREATE" "SEQUENCE" if_not_exists? sequence_name sequence_opt*;
sequence_opt        -> "START" "WITH" \d+
                     | "INCREMENT" "BY" \d+
                     | "NO" "MAXVALUE"
                     | "CACHE" \d+
                     | "NO" "CYCLE";

create_function     -> "CREATE" "FUNCTION" function_name=name "(" ")" "RETURNS" var_name=name "AS"
                       "$BODY$" [^$]+ "$BODY$" function_opt*;
function_opt        -> "LANGUAGE" lang_name=name
                     | "VOLATILE"
                     | "COST" cost=\d+;

// TODO: Hardcode less.
create_trigger      -> "CREATE" "TRIGGER" trigger_name=name
                       "AFTER" "INSERT" "OR" "UPDATE"
                       "ON" table_name "FOR" "EACH" "ROW"
                       "EXECUTE" "PROCEDURE" function_name=name "(" ")";

alter_table         -> "ALTER" "TABLE" table_name (alter=(table_alteration|attr_alteration)):",";
table_alteration    -> ADD_COLUMN      = ("ADD" "COLUMN" column_name attr_type)
                     | DROP_COLUMN     = ("DROP" "COLUMN" column_name)
                     | SET_COLUMN      = ("SET" "ON" "DELETE" on_delete)
                     | ADD_CONSTRAINT  = ("ADD" table_constraint)
                     | DROP_CONSTRAINT = ("DROP" "CONSTRAINT" constraint_name);
attr_alteration     -> "ALTER" "COLUMN" column_name ("TYPE" attr_type | action=("SET" | "DROP") not_null);

drop_table          -> "DROP" "TABLE" table_name;

drop_index          -> "DROP" "INDEX" index_name;

option              -> "allow_commit_timestamp" "=" ("true"|"false");
key_part            -> column_def=(column_name sort_by=("ASC"|"DESC")?):",",?;
attr_type           -> (ARRAY_TYPE|SCALAR_TYPE) not_null? default?;
default             -> "DEFAULT" value;

not_null            -> "NOT" "NULL";
if_not_exists       -> "IF" "NOT" "EXISTS";
pk                  -> "PRIMARY" "KEY";
ARRAY_TYPE          -> SCALAR_TYPE "[" size=\d* "]";
SCALAR_TYPE         -> BOOLEAN   = "BOOLEAN"
                     | INT       = "INT"
                     | BIGINT    = "BIGINT"
                     | FLOAT     = "FLOAT"
                     | DATE      = "DATE"
                     | TIMESTAMP = "TIMESTAMP"
                     | TEXT      = "TEXT"
                     | VARCHAR   = "VARCHAR(" length ")"
                     | BYTES     = "BYTES(" length ")"
                     | NUMERIC   = "NUMERIC";

length              -> (int_value|"MAX");

name                -> [$@A-Za-z_][0-9$@A-Za-z_]*;
table_name          -> [$@A-Za-z_][0-9$@A-Za-z_]*;
constraint_name     -> [$@A-Za-z_][0-9$@A-Za-z_]*;
column_name         -> /{`[^`]*`|[$@A-Za-z_][0-9$@A-Za-z_]*}; //`
index_name          -> [$@A-Za-z_][0-9$@A-Za-z_]*;
sequence_name       -> [$@A-Za-z_][0-9$@A-Za-z_]*;

value               -> int_value|bool_value; // TODO: Others
int_value           -> hex_value|decimal_value;
decimal_value       -> [-]?\d+;
hex_value           -> /{-?0x[[:xdigit:]]+};
bool_value          -> "TRUE" | "FALSE";

.wrapRE -> /{(?i)\s*()};
:};

#################### PARSE TREE EVALUATORS ####################
# These functions turn a spanner ddl parse tree into ddl statements

# evalInt turns an int parse node into an integer
let evalInt = \parsed cond parsed {
    (decimal_value: ('': val), ...): //eval.value(val),
    (hex_value: ('': val), ...): val,
    _: "MAX"
};

# evalType turns an attr_type parse node into an attribute type
let evalType = \parsed
    let data = cond parsed {
        (SCALAR_TYPE: scalar, ...):                    (scalar: scalar, array: false),
        (ARRAY_TYPE: (SCALAR_TYPE: scalar, ...), ...): (scalar: scalar, array: true),
    };
    let type = cond data.scalar {
        (BOOLEAN: _, ...):                 (type: "bool", length: 0),
        (INT: _, ...):                     (type: "int", length: 0),
        (BIGINT: _, ...):                  (type: "int64", length: 0),
        (FLOAT: _, ...):                   (type: "float", length: 0),
        (NUMERIC: _, ...):                 (type: "decimal", length: 38, scale: 9),
        (DATE: _, ...):                    (type: "date", length: 0),
        (TIMESTAMP: _, ...):               (type: "datetime", length: 0),
        (TEXT: _, ...):                    (type: "string", length: "MAX"),
        (VARCHAR: _, length: length, ...): (type: "string", length: evalInt(length.int_value?:"MAX")),
        (BYTES: _, length: length, ...):   (type: "bytes", length: evalInt(length.int_value?:"MAX")),
    };
    (
        type: type.type,
        length: type.length,
        scale: type.scale?:{},
        array: data.array,
        nullable: cond parsed {(:not_null, ...): false, _: true},
    );

# evalAttribute turns an attr node into an attribute of a relation
let evalAttribute = \parsed
    let attr = (name: parsed.column_name.'' rank (:.@));
    let attr = attr +> cond parsed {(:pk, ...): (pk: true), _: ()};
    cond parsed {
        (:attr_type, ...): attr +> evalType(attr_type),
        (:not_null, :action, ...): attr +> (nullable: action = "SET"),
        _: attr,
    };

let evalForeignKeyConstraint = \parsed
    let reference = parsed.fk.foreign -> (
        table_name: .table_name.'' rank (:.@),
        attributes: .column_name >> (.'' rank (:.@)),
    );
    (
        constraint_name: cond {
            (parsed.constraint_name?:false): parsed.constraint_name.'' rank (:.@),
        },
        foreign_keys: parsed.fk.column_name => (
            attribute: .@item.'' rank (:.@),
            reference_table: reference.table_name,
            reference_attribute: reference.attributes(.@),
        ),
    );

let evalUniqueConstraint = \parsed
    (
        constraint_name: cond {
            (parsed.constraint_name?:false): parsed.constraint_name.'' rank (:.@),
        },
        unique_keys: parsed.unique.column_name => (.@item.'' rank (:.@))
    );

let evalConstraint = \parsed
    cond parsed {
        (:fk, ...): evalForeignKeyConstraint(parsed),
        (:unique, ...): evalUniqueConstraint(parsed),
    }
;

let evalTableAlteration = \parsed cond parsed {
    (table_alteration: (ADD_COLUMN: data, ...), ...): (
        type: "add_column",
        alteration: evalAttribute(data),
    ),

    (table_alteration: (DROP_COLUMN: data, ...), ...): (
        type: "drop_column",
        alteration: (
            name: data.column_name.'' rank (:.@),
        ),
    ),

    (table_alteration: (SET_COLUMN: data, ...), ...): (
        type: "on_delete",
        alteration: data
    ),

    (table_alteration: (ADD_CONSTRAINT: data, ...), ...): (
        type: "add_constraint",
        alteration: evalConstraint(data.table_constraint),
    ),

    (table_alteration: (DROP_CONSTRAINT: data, ...), ...): (
        type: "drop_constraint",
        alteration: data,
    ),

    (attr_alteration: data, ...): (
        type: "alter_column",
        alteration: evalAttribute(data),
    ),
};

# concatOffset appends the two strings preserving string offsets
let concatOffset = \str1 \str2
    (str1 => .@ orderby .)(0)\$`${str1}${str2}`;

# parseKeyPart parses the primary_key generated from spanner sql
let parseKeyPart = \t
    t.column_def >> \def cond {
        (def.sort_by?:false): concatOffset(def.column_name.'', $`(${//str.lower(def.sort_by.'')})`),
        _: def.column_name.'' rank (:.@),
    };

# evalDdl turns a ddl parse tree into a list of ddl statements ready to be applied to a model
# Use applyStmt to apply these statements to a spanner model
let evalDdl = \parsed parsed.stmt >> cond . {
    (create_table: val, ...):
        let attributes = val.attr >> evalAttribute(.);
        (
            stmt: "create_table",
            data: (
                name: val.table_name.'' rank (:.@),
                :attributes,
                foreign_keys: cond val {
                    (table_constraint: [...constraints], ...): constraints => evalConstraint(.@item),
                },
                primary_key: cond val {
                    (:pk, key_part: [k], ...): parseKeyPart(k),
                    _: attributes where .@item.pk?:{} >> .name,
                },
                cluster: cond {
                    (val.cluster?:false): val.cluster >> (
                        interleaved_in: (.table_name.'' rank (:.@)),
                        on_delete: cond (.).on_delete?:{} {
                            (CASCADE: ('': s), ...): s rank (:.@),
                            (NO_ACTION: ('': s), ...): s rank (:.@),
                        },
                    ),
                },
            ),
        )
    ,

    (create_index: val, ...): (
        stmt: "create_index",
        data: (
            unique: cond {
                (val.unique?:false): true,
            },
            nullfiltered: cond {
                (val.nullfiltered?:false): true,
            },
            name: val.index_name.'' rank (:.@),
            table_name: val.table_name.'' rank (:.@),
            key_part: parseKeyPart(val.key_part),
            storing_col: cond {
                (val.storing_clause?:false): val.storing_clause.column_name >> (.'' rank (:.@)),
            },
            interleaved_table: (val.interleaving_clause?.table_name.'':'') rank (:.@),
        ),
    ),

    (create_database: val, ...): (
        stmt: "create_database",
        data: (
            name: val.database.'' rank (:.@),
        ),
    ),

    (alter_table: val, ...): (
        stmt: "alter_table",
        data: (
            table_name: val.table_name.'' rank (:.@),
            alterations: val.alter >> evalTableAlteration(.),
        ),
    ),

    (drop_table: val, ...): (
        stmt: "drop_table",
        data: val.table_name.'' rank (:.@),
    ),

    (drop_index: val, ...): (
        stmt: "drop_index",
        data: val.index_name.'' rank (:.@),
    ),

    _: let _ = //log.print($`skipped unsupported statement: ${.}`); {}
};

################## PARSERS ##################

# parses a byte array against the ddl grammar and hands it to eval
let parseDdl = \bytes evalDdl(//grammar.parse(grammar, "ddl", bytes));

# parses a list of schema files. reads each file and hands to parseDdl
let parseSchema = \files //seq.concat(files >> parseDdl(//os.file(.)));

################## STATEMENTS #################

# applies a create table statement
let applyCreateTable = \relation \model
    let _ = //test.assert.equal({}, model.entities where .name = relation.name);
    model +> (entities: model.entities | {relation});

# applies a create index statement
let applyCreateIndex = \index \model
    let _ = //test.assert.equal({}, model.indexes where .name = index.name);
    model +> (indexes: model.indexes | {index});

# applies a create database statement
let applyCreateDatabase = \database \model
    let _ = //test.assert.equal({}, model.schema where .name = database.name);
    model +> (schema: model.schema | {database});

# applies a drop table statement
let applyDropTable = \name \model
    let _ = //test.assert.equal(1, (model.entities where .name = name) count);
    model +> (entities: model.entities where .name != name);

# applies a drop index statement
let applyDropIndex = \name \model
    let _ = //test.assert.equal(1, (model.indexes where .name = name) count);
    model +> (indexes: model.indexes where .name != name);

# Alterations.

# changeCols returns an altered model with fn applied to the attributes of the entity named t.
let changeCols = \m \t \fn
    let {old} = m.entities where .name = t;
    m +> (entities: m.entities without old with old +> (
        attributes: fn(old.attributes)
    ));

# addCol adds column c to t's attributes in m.
let addCol = \m \t \c changeCols(m, t, \cs cs ++ [c]);
# dropCol removes the named column from t's attributes in m.
let dropCol = \m \t \name changeCols(m, t, \cs (cs where .@item.name != name) rank (:.@));
# alterCol replaces the named column in t's attributes in m.
let alterCol = \m \t \c changeCols(m, t, \cs
    let {old} = cs where .@item.name = c.name;
    cs without old with old +> (@item: old.@item +> c)
);

# Applies a single table alteration given model, table name and alteration data.
let stepAlt = \m \t \(:type, alteration:alt)
    cond type {
        'add_column': addCol(m, t, alt),
        'drop_column': dropCol(m, t, alt.name),
        'alter_column': alterCol(m, t, alt),
        # 'on_delete':  TODO,
        # 'add_constraint':  TODO,
        # 'drop_constraint':  TODO,
        _: m,
    };

# applies an alter table stamement
let applyAlterTable = \(table_name: t, :alterations) \model
    //{/pkg/arrai/util}.reduce(alterations, \m \a stepAlt(m, t, a), model);

# applies either a single staement or a list of statements in the given order
let rec applyStmt = \stmt \model
    cond stmt {
        # match against the single statement types
        (stmt: "create_database", data: schema): applyCreateDatabase(schema, model),
        (stmt: "create_table", data: relation):  applyCreateTable(relation, model),
        (stmt: "create_index", data: index):     applyCreateIndex(index, model),
        (stmt: "alter_table", data: alteration): applyAlterTable(alteration, model),
        (stmt: "drop_table", data: name):        applyDropTable(name, model),
        (stmt: "drop_index", data: name):        applyDropIndex(name, model),
        (...):
            # guard against unrecognised statements
            let _ = //log.print($`unknown statement: ${stmt}`);
            model,

        # match against an arrai of statements and recursively apply them in order
        [first, ...rem]: applyStmt(rem, applyStmt(first, model)),
        []:              model,
    };

(
    :applyCreateTable,
    :applyAlterTable,
    :applyCreateIndex,
    :applyCreateDatabase,
    :applyDropTable,
    :applyDropIndex,

    # For testing.
    # empty model, use this as the base of an applyStmt call to create a model from a ddl statement
    emptyModel:        (entities: {}, indexes: {}, schema: {}),

    # parses a single byte array representing a spanner schema
    parseDdl:          parseDdl,

    # parses a list of schema files. opens the files and calls parseDdl on them in the given order
    parseSchema: parseSchema,

    # applies a ddl stmt to a model. Use emptyModel to get a model from scratch
    applyStmt:         applyStmt,
)
