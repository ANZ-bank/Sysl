# Transform Avro record to Sysl record
let util = //{./avro_util};

# Build type annotation like [union=["int32", "null"]]
let buildTypeAnnotation = \type
    cond type {
        (a: typeArray):
            let types = (typeArray >> util.getTypeName(.)) >> .s;
            cond {
                //seq.contains(['null'], types):
                    cond {
                        //seq.has_prefix(['null'], types): # types is ['null', 'string']
                            '',
                        _: # types is ['string', 'null']
                            $'union=${types}'
                    }
                ,
                _: ''
            }
        ,
        _: ''
    }
;

let buildLogicalTypeAnnotation = \.
    cond .('type') {
        {'type': typeName, 'logicalType': logicalTypeName, ...}:
            cond logicalTypeName.s {
                'uuid': '[~uuid]',
                'date': '',
                'time-millis': ['~time-millis'],
                'time-micros': ['~time-micros'],
                'timestamp-millis': ['~timestamp-millis'],
                'timestamp-micros': ['~timestamp-micros'],
                'local-timestamp-millis': ['~local-timestamp-millis'],
                'local-timestamp-micros': ['~local-timestamp-micros'],
                'duration': ['~fixed', 'fixed_size="12"', '~duration'],
                _: []
            },
        _: []
    }
;

let buildAnnotations = \.
    buildLogicalTypeAnnotation(.) ++ 
    [
        buildTypeAnnotation(.('type')),
        util.getAnnotationS(., 'doc'),
        util.getDefaultVal(.),
        util.getAnnotationS(., 'order'),
    ]
;

let printMapType = \record
$`!type String${util.transformType(record)}Item ${util.prettyAnnotations(['json_map_key="key"', util.getDefaultVal(record)])}:
    key <: string
    value <: ${util.transformType(record)}${'\n'}
`;

let printFieldAliases = \field
    let aliases = field('aliases')? .a:[];
    cond aliases {[]: '',
        _: 
$`

${aliases >> \alias 
    $`${alias.s} <: ${util.transformType(field('type'))} ${util.prettyAnnotations(buildAnnotations(field) + [$`alias_of="${field('name').s}"`])}`::\i}`
}
;  

let transformer = \record
$`${
    cond record {
        {'isMap':(s: 'true'), ...}:
            cond record {
                {"name": (s: typeName), ...}: printMapType(record),
            },
    }
}
${
cond record {
{'type': (s: 'record'), ...}:
$`!type ${record('name').s} ${util.prettyAnnotations(['namespace', 'doc'] >> util.getAnnotationS(record, .))}:
    ${
    let fields = record('fields')? .a:[]; 
    fields >> $`${.('name').s} <: ${util.transformType(.('type'))} ${util.prettyAnnotations(buildAnnotations(.))}${
            printFieldAliases(.)        
        }`::\n}
${
let aliases = record('aliases')? .a:[];
cond aliases {
    [...]: 
$`

${aliases >> ($`!alias ${.s}:
    ${record('name').s}`)::\i\n}`,
}}`}}`;transformer
