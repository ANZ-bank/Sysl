# Transform Avro record to Sysl record
let util = //{./util};

# Build type annotation like [union=["int32", "null"]]
let buildTypeAnnotation = \type
    cond type {
        (a: typeArray):
            let types = (typeArray >> util.getTypeName(.)) >> .s;
            cond //seq.contains(['null'])(types) {
                true:
                    cond //seq.has_prefix(['null'])(types) {
                        true: # types is ['null', 'string']
                            '',
                        _: # types is ['string', 'null']
                            $'union=${types}'
                    }
                ,
                _: ''
            }
        ,
        _: ''
    }
;

let buildLogicalTypeAnnotation = \.
    cond .('type') {
        {'type': typeName, 'logicalType': logicalTypeName, ...}:
            cond logicalTypeName.s {
                'uuid': '[~uuid]',
                'date': '',
                'time-millis': ['~time-millis'],
                'time-micros': ['~time-micros'],
                'timestamp-millis': ['~timestamp-millis'],
                'timestamp-micros': ['~timestamp-micros'],
                'local-timestamp-millis': ['~local-timestamp-millis'],
                'local-timestamp-micros': ['~local-timestamp-micros'],
                'duration': ['~fixed', 'fixed_size="12"', '~duration'],
                _: []
            },
        _: []
    }
;

# TODO default = {} can't work still
let getDefaultVal = \.
    let default = .('default')?:""; 
    cond default {
        "": "",
        ():'default="null"', 
        (b: true): $'default="true"',
        (b: false): $'default="false"',
        (a: {}): $'default="[]"',
        (a: [(:s), ...]): $'default="${default.a >> .s}"',
        _: $'default="${default}"'
    } 
;

let buildAnnotations = \.
    buildLogicalTypeAnnotation(.) + 
    [
        buildTypeAnnotation(.('type')),
        util.getAnnotationS(., 'doc'),
        getDefaultVal(.),
        util.getAnnotationS(., 'order'),
    ]
;

let t = \record
$`${
    cond record {
        {'isMap':(s: 'true'), ...}: 
            $'${'\n'}${util.indent}!type String${record('name').s}Item[json_map_key="key"]:${'\n'}${util.indent}${util.indent}key <: string${
                '\n'}${util.indent}${util.indent}value <: ${record('name').s}${'\n\n'}', 
            _:''
        }
}${'\n'}${util.indent}!type ${record('name').s}${
    util.prettyAnnotations([util.getAnnotationS(record, 'namespace'), util.getAnnotationS(record, 'doc')])
}:
${
    let fields = record('fields')? .a:[]; 
    fields >> 
        ($`${util.indent}${util.indent}${.('name').s} <: ${util.transformType(.('type'))}${
                util.prettyAnnotations(buildAnnotations(.))
            }${
                let aliases = .('aliases')? .a:[];
                cond aliases {
                    []: '',
                    _: $'${'\n'}${aliases >> \alias 
                                    $'${util.indent}${util.indent}${alias.s} <: ${util.transformType(.('type'))}${
                                        util.prettyAnnotations(buildAnnotations(.) + [$'alias_of="${.('name').s}"'])}'::\i}'
                }
            }`)::
}

${
let aliases = record('aliases')? .a:[];
aliases >> 
($`${util.indent}!alias ${.s}:
${util.indent}${util.indent}${record('name').s}`)::\i
}`;t
