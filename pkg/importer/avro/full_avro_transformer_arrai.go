// Package avro ...
// AUTOGENERATED. DO NOT EDIT.
package avro

const AvroTransformerScript string = `### ------------------------------------------------------------------------ ###
###  avro_util.arrai                                                         ###
### ------------------------------------------------------------------------ ###

# Utilities
let indent = "    ";

let getAnnotationS = \item \name
    let annotation = item(name)? .s:"";
    let annotationTxt = 
        cond annotation {
            "":"", 
            _: $'${cond name {'doc':'description', _:name}}="${annotation}"'
        };
    annotationTxt
;

# Pretty annotation array
let prettyAnnotations = \annotationArray
    let str = $'${let a = annotationArray where .@item != "" rank (:.@); a >>> \i \item item::, }';
    cond str {'':$'', _:$'[${str}]'}
;

# Transform Avro primitive types to Sysl ones
let transformPrimitiveType = \type
    cond type {
        'null': 'null',
        'boolean': 'bool',
        'int': 'Int32',
        'long': 'Int64',
        'float': 'Float32',
        'double': 'Float64',
        'bytes': "bytes",
        'string': 'string',
        _: 'NonePrimitiveType'              
    }
;

let transformLogicalTypes = \type
    cond type('logicalType').s {
        'decimal': $'decimal(${type('precision')}.${type('scale')})',
        'uuid': 'string',
        'date': 'date',
        'time-millis': 'uint32',
        'time-micros': 'uint64',
        'timestamp-millis': 'datetime',
        'timestamp-micros': 'datetime',
        'local-timestamp-millis': 'datetime',
        'local-timestamp-micros': 'datetime',
        'duration': 'bytes',
        _: 'NoneLogicalType'  
    }
;

# Get type name from types which looks like:
# ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
let getTypeName = \t
    cond t {
        (:s): t,
        {'type': (s: type), 'items': (:s), ...}:
            cond type {
                'map': (s: $'${//str.title(t('items').s)}Set', type_S: $'set of ${t('items').s}'), # will be displayed in union definition
                'array': (s: $'${//str.title(t('items').s)}Sequence', type_S: $'sequence of ${t('items').s}'), # will be displayed in union definition
            },
        {'type': (s: type), 'items': {'type': (:s), ...}, ...}:
            cond type {
                'map': (s: $'${t('items')('name').s}Set', type_S: $'set of ${t('items')('name').s}'), # will be displayed in union definition
                'array': (s: $'${t('items')('name').s}Sequence', type_S: $'sequence of ${t('items')('name').s}'), # will be displayed in union definition
            },
        {'type': (:s), ...}: (s : t('name').s),
    }
;

let combineTypes = \types \handler
    let fullTypeNames = types >> getTypeName(.);
    let types = fullTypeNames >> .s;
    cond //seq.contains(['null'], types) {
        true:
            let typeNames = fullTypeNames where .@item.s != 'null' rank (:.@);
            cond types count {
                2: //seq.concat(typeNames >> handler(.)) + '?',
                _: //seq.concat(typeNames >> //str.title(.s) orderby .@item >> .@item) + '?'
            }
        ,
        _: //seq.concat(types >> //str.title(.) orderby .@item >> .@item)
    }
;

let transformType = \type
    cond type {
        # (s: 'string') etc.
        (s: typeName):
            let primitive = transformPrimitiveType(typeName);
            cond primitive {
                "null": "string[~null]",
                'NonePrimitiveType': typeName,
                _: primitive
            },
        (a: typeArray):
            # type can be ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
            # [(s: 'null'), (s: 'string')] to ['null', 'string']
            combineTypes(typeArray, \. cond . {(type_S:type_S, ...): type_S, _: .s}),
        {'logicalType': logicalTypeName, 'type': typeName, ...}: # Must be before {'type': typeName, ...}
            transformLogicalTypes(type), 
        {'type': typeName, ...}:
            # it is array, map
            cond typeName.s {
                'array': 'sequence of ' + cond type('items') {{'name': (:s), ...}: s, (:s): s},
                'map': 'set of ' + cond type('items') {{'name': (:s), ...}: 'String' + s + 'Item', (:s): s},
                _: type('name').s
            },
    }
;

let getDefaultVal = \.
    let default = .('default')?:""; 
    cond default {
        "": "",
        ():'default="null"', 
        (b: true): $'default="true"',
        (b: false): $'default="false"',
        (a: {}): $'default="[]"',
        (a: [(:s), ...]): $'default="${default.a >> .s}"',
        _: $'default="${default}"'
    } 
;

let isFirstLetterUppercase = \str
    let letter = str where .@ = 0;
    //str.upper(letter) = letter
;

let util = (
    : prettyAnnotations,
    : transformType,
    : getAnnotationS,
    : getTypeName,
    : getDefaultVal,
    : combineTypes,
);

let avro_util_arrai = 
util;

### ------------------------------------------------------------------------ ###
###  to_sysl_alias.arrai                                                     ###
### ------------------------------------------------------------------------ ###

let util = avro_util_arrai;

let transformer = \.
cond . {
{'type': (s: 'fixed'), ...}:
$`+"`"+`!alias ${.('name').s}${
    util.prettyAnnotations(['~fixed', $`+"`"+`fixed_size="${.('size')}"`+"`"+`, util.getAnnotationS(., 'namespace')])
}:
    bytes
${
    let aliases = .('aliases')? .a:[];
    cond {
        aliases count > 0: $'
        
${aliases >> \alias $`+"`"+`!alias ${alias.s}:
    ${.('name').s}`+"`"+`::\n\n}',
    }
}`+"`"+`,
{'type': (s: 'array'), ...}:
    $`+"`"+`!alias ${//str.title(.('items').s)}Sequence${
        util.prettyAnnotations([util.getDefaultVal(.)])
    }: sequence of ${.('items').s}`+"`"+`,
'int':
$`+"`"+`!alias Int_32 [bits="32"]:
    int
    
`+"`"+`,
'long':
$`+"`"+`!alias Int_64 [bits="64"]:
    int

`+"`"+`,
'float':
$`+"`"+`!alias Float32 [bits="32"]:
    float    

`+"`"+`,
'double':
$`+"`"+`!alias Float64 [bits="32"]:
    float    

`+"`"+`,        
};

let to_sysl_alias_arrai = 
transformer;

### ------------------------------------------------------------------------ ###
###  to_sysl_enum.arrai                                                      ###
### ------------------------------------------------------------------------ ###

# Transform Avro enum to Sysl enum
let util = avro_util_arrai;

let transformer = \enum

let annotations = ['namespace', 'default', 'doc'] >> util.getAnnotationS(enum, .);

$`+"`"+`!enum ${enum('name').s}${util.prettyAnnotations(annotations)}:
    ${enum('symbols').a >>> \i \item  $`+"`"+`${item.s}: ${i}`+"`"+`::\i}

${
let aliases = enum('aliases')? .a:[]; 
aliases >> $`+"`"+`
    !alias ${.s}: ${enum('name').s}`+"`"+`::\n
}`+"`"+`;

let to_sysl_enum_arrai = 
transformer;

### ------------------------------------------------------------------------ ###
###  to_sysl_type.arrai                                                      ###
### ------------------------------------------------------------------------ ###

# Transform Avro record to Sysl record
let util = avro_util_arrai;

# Build type annotation like [union=["int32", "null"]]
let buildTypeAnnotation = \type
    cond type {
        (a: typeArray):
            let types = (typeArray >> util.getTypeName(.)) >> .s;
            cond {
                //seq.contains(['null'], types):
                    cond {
                        //seq.has_prefix(['null'], types): # types is ['null', 'string']
                            '',
                        _: # types is ['string', 'null']
                            $'union=${types}'
                    }
                ,
                _: ''
            }
        ,
        _: ''
    }
;

let buildLogicalTypeAnnotation = \.
    cond .('type') {
        {'type': typeName, 'logicalType': logicalTypeName, ...}:
            cond logicalTypeName.s {
                'uuid': '[~uuid]',
                'date': '',
                'time-millis': ['~time-millis'],
                'time-micros': ['~time-micros'],
                'timestamp-millis': ['~timestamp-millis'],
                'timestamp-micros': ['~timestamp-micros'],
                'local-timestamp-millis': ['~local-timestamp-millis'],
                'local-timestamp-micros': ['~local-timestamp-micros'],
                'duration': ['~fixed', 'fixed_size="12"', '~duration'],
                _: []
            },
        _: []
    }
;

let buildAnnotations = \.
    buildLogicalTypeAnnotation(.) ++ 
    [
        buildTypeAnnotation(.('type')),
        util.getAnnotationS(., 'doc'),
        util.getDefaultVal(.),
        util.getAnnotationS(., 'order'),
    ]
;

let printMapType = \record
$`+"`"+`!type String${util.transformType(record)}Item ${util.prettyAnnotations(['json_map_key="key"', util.getDefaultVal(record)])}:
    key <: string
    value <: ${util.transformType(record)}${'\n'}
`+"`"+`;

let printFieldAliases = \field
    let aliases = field('aliases')? .a:[];
    cond aliases {[]: '',
        _: 
$`+"`"+`

${aliases >> \alias 
    $`+"`"+`${alias.s} <: ${util.transformType(field('type'))} ${util.prettyAnnotations(buildAnnotations(field) + [$`+"`"+`alias_of="${field('name').s}"`+"`"+`])}`+"`"+`::\i}`+"`"+`
}
;  

let transformer = \record
$`+"`"+`${
    cond record {
        {'isMap':(s: 'true'), ...}:
            cond record {
                {"name": (s: typeName), ...}: printMapType(record),
            },
    }
}
${
cond record {
{'type': (s: 'record'), ...}:
$`+"`"+`!type ${record('name').s} ${util.prettyAnnotations(['namespace', 'doc'] >> util.getAnnotationS(record, .))}:
    ${
    let fields = record('fields')? .a:[]; 
    fields >> $`+"`"+`${.('name').s} <: ${util.transformType(.('type'))} ${util.prettyAnnotations(buildAnnotations(.))}${
            printFieldAliases(.)        
        }`+"`"+`::\n}
${
let aliases = record('aliases')? .a:[];
cond aliases {
    [...]: 
$`+"`"+`

${aliases >> ($`+"`"+`!alias ${.s}:
    ${record('name').s}`+"`"+`)::\i\n}`+"`"+`,
}}`+"`"+`}}`+"`"+`;

let to_sysl_type_arrai = 
transformer;

### ------------------------------------------------------------------------ ###
###  to_sysl_union.arrai                                                     ###
### ------------------------------------------------------------------------ ###

# Transform Avro union to Sysl union
let util = avro_util_arrai;

let printUnion = \union

let types = union >> util.getTypeName(.) >> cond . {(:type_S, ...): type_S, _: .s};
$`+"`"+`!union ${//seq.sub("?", "", util.combineTypes(union, \. .s))}:
    ${types where .@item != 'null' rank (:.@) orderby .@item >> .@item >> $'${.}'::\n}`+"`"+`
;

let transformer = \union
    let types = union >> util.getTypeName(.) >> .s;
    cond {
        //seq.contains(['null'], types):
            cond {
                types count > 2: printUnion(union),
            }
        ,
        _: printUnion(union)
    }
;

let to_sysl_union_arrai = 
transformer;

### ------------------------------------------------------------------------ ###
###  transformer.arrai                                                       ###
### ------------------------------------------------------------------------ ###

let util = avro_util_arrai;

# Extra items transformed to Sysl type !enum
let rec extraEnums = \schema
  cond schema {
    {'type': (s: 'enum'), 'name': name, ...}:
      {schema},
    {'type': (s: 'record'), 'name': name, "fields": (a : fields), ...}:
      //rel.union(fields => extraEnums(.@item("type"))),
    {'type': type, 'items': items, ...}: # Map or array
      cond items {
        (a: types): //rel.union(types => extraEnums(.@item)), # array
        (:s): {}, # primitive
        _: extraEnums(items),
      },
    {'type': (a: types)}: # type is an array
      //rel.union(types => extraEnums(.@item)),  
    (a: types): # root is json array 
      //rel.union(types => extraEnums(.@item)),
  }
;

# Extra items transformed to Sysl type !type 
let rec extraTypes = \schema
  cond schema {
    {"type": (s: "record"), "fields": (a : fields), ...}:
      {schema} | //rel.union(fields => extraTypes(.@item("type"))),
    {'type': (s: type), 'items': items, ...}: # array or map
      cond items {
        (a: types): //rel.union(types => extraTypes(.@item)), # array
        (:s): {}, # primitive
        _:
          cond type {
            'map': extraTypes(items |  {'isMap': (s: 'true')}),
            _: extraTypes(items),
          } 
      },
    {'type': (a: types)}: # type is an array
      //rel.union(types => extraTypes(.@item)),  
    (a: types): # root is json array 
      //rel.union(types => extraTypes(.@item)),
  }
;

# Extra items transformed to Sysl type !alias
let rec extraAliases = \schema
  cond schema {
    {"type": (s: "record"), "name": (s: name), "fields": (a : fields), ...}:
      //rel.union(fields => extraAliases(.@item("type"))),
    {'type': type, 'items': items, ...}: # array or map
      cond items {
        (:a): //rel.union(a => extraAliases(.@item)), # array
        (:s): {}, # primitive
        _: extraAliases(items)
      },
    {'type': (:a), ...}: # type is an array
      //rel.union(a => extraAliases(.@item)),  
    (:a): # root is json array 
      //rel.union(a => extraAliases(.@item)),
    {'type': (:s), ...}: # fixed
      {schema},
    (:s):
      {s},
};

# Extra item transformed to Sysl type !union
let rec extraUnions = \schema
  cond schema {
    (a: types): {types} | //rel.union(types => extraUnions(.@item)),
    {'type': (s: 'record'), "fields": (a : fields), ...}:
      //rel.union(fields => extraUnions(.@item("type"))),
    {'type': type, 'items': items, ...}: # array or map
      cond items {
        (a: types): //rel.union(types => extraUnions(.@item)), # array
        (:s): {}, # primitive
        _: extraUnions(items),
      },
    {'type': (a: types)}: # type is an array
      //rel.union(types => extraUnions(.@item)),  
    (a: types): # root is json array 
      //rel.union(types => extraUnions(.@item)),    
  }
;

let avroTransformer = \schema \appName \packageName
  # Load Avro spec whose format is protobuf 
  let schema = //encoding.json.decode(schema);

$`+"`"+`
##########################################
##                                      ##
##  AUTOGENERATED CODE -- DO NOT EDIT!  ##
##                                      ##
##########################################
${appName}${util.prettyAnnotations(['avro_spec="1.0"',$'${cond packageName {'':'', _:$'package="${packageName}"'}}'])}:
    # Types
    ${extraTypes(schema) => to_sysl_type_arrai(.) orderby . ::\n\n}
    # Aliases
    ${extraAliases(schema) => to_sysl_alias_arrai(.) orderby . ::\n}
    # Unions
    ${extraUnions(schema) => to_sysl_union_arrai(.) orderby . ::\n\n}
    # Enums
    ${extraEnums(schema) => to_sysl_enum_arrai(.) orderby . ::\n}
`+"`"+`;
avroTransformer
`
