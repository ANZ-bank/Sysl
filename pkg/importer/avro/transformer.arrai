let util = //{./avro_util};

# Extra items transformed to Sysl type !enum .
let rec extraEnums = \schema
  cond schema {
    {'type': (s: 'enum'), 'name': name, ...}:
      {schema},
    {'type': (s: 'record'), 'name': name, 'fields': (a : fields), ...}:
      //rel.union(fields => extraEnums(.@item('type'))),
    {'type': type, 'items': items, ...}: # Array.
      cond items {
        (a: types): //rel.union(types => extraEnums(.@item)), # Array.
        (:s): {}, # Primitive.
        _: extraEnums(items),
      },
    {'type': type, 'values': values, ...}: # Map or array.
      cond values {
        (a: types): //rel.union(types => extraEnums(.@item)), # Array.
        (:s): {}, # Primitive.
        _: extraEnums(values),
      },
    {'type': (a: types)}: # Type is an array.
      //rel.union(types => extraEnums(.@item)),
    (a: types): # Root is json array.
      //rel.union(types => extraEnums(.@item)),
  }
;

# Extra items transformed to Sysl type !type .
let rec extraTypes = \schema
  cond schema {
    {'type': (s: 'record'), 'fields': (a : fields), ...}:
      {schema} | //rel.union(fields => extraTypes(.@item('type'))),
    {'type': (s: type), 'items': items, ...}: # Array.
      cond items {
        # Array.
        (a: types): //rel.union(types => extraTypes(.@item)),
        _: extraTypes(items),
      },
    {'type': (s: type), 'values': values, ...}: # Map.
      cond values {
        # Array.
        (a: types): //rel.union(types => extraTypes(.@item)),
        # Field values is primitive or customized type like {'type': (s: 'map'), 'items': (s: 'string'), ...}.
        (:s):
          cond {
            'map': {schema | {'isMap': (s: 'true')}},
          },
        _:
          cond type {
            # Field values is customized type like 'type': {'type': (s: 'record'), ...}.
            'map': extraTypes(values |  {'isMap': (s: 'true')}),
            _: extraTypes(values),
          },
      },
    {'type': (a: types)}: # Type is an array.
      //rel.union(types => extraTypes(.@item)),
    (a: types): # Root is json array.
      //rel.union(types => extraTypes(.@item)),
  }
;

# Extra items transformed to Sysl type !alias .
let rec extraAliases = \schema
  cond schema {
    {'type': (s: 'record'), 'name': (s: name), 'fields': (a : fields), ...}:
      //rel.union(fields => extraAliases(.@item('type'))),
    {'type': type, 'items': items, ...}: # Array.
      cond items {
        (:a): //rel.union(a => extraAliases(.@item)), # Array.
        (:s): {}, # Primitive.
        _: extraAliases(items)
      },
    {'type': type, 'values': values, ...}: # Map.
      cond values {
        (:a): //rel.union(a => extraAliases(.@item)), # Array.
        (:s): {}, # Primitive.
        _: extraAliases(values)
      },
    {'type': (:a), ...}: # Type is an array.
      //rel.union(a => extraAliases(.@item)),
    (:a): # Root is json array.
      //rel.union(a => extraAliases(.@item)),
    {'type': (:s), ...}: # Fixed.
      {schema},
  }
;

# Extra item transformed to Sysl type !union .
let rec extraUnions = \schema
  cond schema {
    (a: types):
      cond types {
        [(s: 'null'), ...]: cond {types count > 2: {types} | //rel.union(types => extraUnions(.@item))}, # Ignore types like ['null', 'string'].
        _: {types} | //rel.union(types => extraUnions(.@item)),
      },
    {'type': (s: 'record'), 'fields': (a : fields), ...}:
      //rel.union(fields => extraUnions(.@item('type'))),
    {'type': type, 'items': items, ...}: # Array.
      cond items {
        (a: types): //rel.union(types => extraUnions(.@item)), # Array.
        (:s): {}, # Primitive.
        _: extraUnions(items),
      },
    {'type': type, 'values': values, ...}: # Map.
      cond values {
        (a: types): //rel.union(types => extraUnions(.@item)), # Array.
        (:s): {}, # Primitive.
        _: extraUnions(values),
      },
    {'type': (a: types)}: # Type is an array.
      //rel.union(types => extraUnions(.@item)),
    (a: types): # Root is json array.
      //rel.union(types => extraUnions(.@item)),
  }
;

let avroTransformer = \schema \appName \packageName
  # Load Avro spec whose format is protobuf.
  let schema = //encoding.json.decode(schema);

# Trim trailing whitespace.
let trim = \str
    let re = //re.compile(`^(.*[^\s])\s*$`);
    $`${//seq.split('\n', str) >> cond re.match(.) {[[_, s]]: s, _: ''}::\n}`;

trim($`
    ##########################################
    ##                                      ##
    ##  AUTOGENERATED CODE -- DO NOT EDIT!  ##
    ##                                      ##
    ##########################################

    ${appName}${util.prettyAnnotations([(name: 'avro_spec', value: '1.0'), cond {packageName: (name: 'package', value: packageName), _: ()}])}:
        ${extraTypes(schema) => //{./to_sysl_type}(.) orderby . ::\n}
        ${extraEnums(schema) => //{./to_sysl_enum}(.) orderby . ::\n}
        ${extraAliases(schema) => //{./to_sysl_alias}(.) orderby . ::\n}
        ${extraUnions(schema) => //{./to_sysl_union}(.) orderby . ::\n}
`);

avroTransformer
