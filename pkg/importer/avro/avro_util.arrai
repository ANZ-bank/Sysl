# Utilities
let indent = "    ";

let getAnnotationS = \item \name
    let annotation = item(name)? .s:"";
    let annotationTxt = 
        cond annotation {
            "":"", 
            _: $'${cond name {'doc':'description', _:name}}="${annotation}"'
        };
    annotationTxt
;

# Pretty annotation array
let prettyAnnotations = \annotationArray
    let str = $'${let a = annotationArray where .@item != "" rank (:.@); a >>> \i \item item::, }';
    cond str {'':$'', _:$'[${str}]'}
;

# Transform Avro primitive types to Sysl ones
let transformPrimitiveType = \type
    cond type {
        'null': 'null',
        'boolean': 'bool',
        'int': 'Int32',
        'long': 'Int64',
        'float': 'Float32',
        'double': 'Float64',
        'bytes': "bytes",
        'string': 'string',
        _: 'NonePrimitiveType'              
    }
;

let transformLogicalTypes = \type
    cond type('logicalType').s {
        'decimal': $'decimal(${type('precision')}.${type('scale')})',
        'uuid': 'string',
        'date': 'date',
        'time-millis': 'uint32',
        'time-micros': 'uint64',
        'timestamp-millis': 'datetime',
        'timestamp-micros': 'datetime',
        'local-timestamp-millis': 'datetime',
        'local-timestamp-micros': 'datetime',
        'duration': 'bytes',
        _: 'NoneLogicalType'  
    }
;

# Get type name from types which looks like:
# ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
let getTypeName = \t
    cond t {
        (:s): t,
        {'type': (s: type), 'items': (:s), ...}:
            cond type {
                'map': (s: $'${//str.title(t('items').s)}Set', type_S: $'set of ${t('items').s}'), # will be displayed in union definition
                'array': (s: $'${//str.title(t('items').s)}Sequence', type_S: $'sequence of ${t('items').s}'), # will be displayed in union definition
            },
        {'type': (s: type), 'items': {'type': (:s), ...}, ...}:
            cond type {
                'map': (s: $'${t('items')('name').s}Set', type_S: $'set of ${t('items')('name').s}'), # will be displayed in union definition
                'array': (s: $'${t('items')('name').s}Sequence', type_S: $'sequence of ${t('items')('name').s}'), # will be displayed in union definition
            },
        {'type': (:s), ...}: (s : t('name').s),
    }
;

let combineTypes = \types \handler
    let fullTypeNames = types >> getTypeName(.);
    let types = fullTypeNames >> .s;
    cond //seq.contains(['null'], types) {
        true:
            let typeNames = fullTypeNames where .@item.s != 'null' rank (:.@);
            cond types count {
                2: //seq.concat(typeNames >> handler(.)) + '?',
                _: //seq.concat(typeNames >> //str.title(.s) orderby .@item >> .@item) + '?'
            }
        ,
        _: //seq.concat(types >> //str.title(.) orderby .@item >> .@item)
    }
;

let transformType = \type
    cond type {
        # (s: 'string') etc.
        (s: typeName):
            let primitive = transformPrimitiveType(typeName);
            cond primitive {
                "null": "string[~null]",
                'NonePrimitiveType': typeName,
                _: primitive
            },
        (a: typeArray):
            # type can be ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
            # [(s: 'null'), (s: 'string')] to ['null', 'string']
            combineTypes(typeArray, \. cond . {(type_S:type_S, ...): type_S, _: .s}),
        {'logicalType': logicalTypeName, 'type': typeName, ...}: # Must be before {'type': typeName, ...}
            transformLogicalTypes(type), 
        {'type': typeName, ...}:
            # it is array, map
            cond typeName.s {
                'array': 'sequence of ' + cond type('items') {{'name': (:s), ...}: s, (:s): s},
                'map': 'set of ' + cond type('items') {{'name': (:s), ...}: 'String' + s + 'Item', (:s): s},
                _: type('name').s
            },
    }
;

let getDefaultVal = \.
    let default = .('default')?:""; 
    cond default {
        "": "",
        ():'default="null"', 
        (b: true): $'default="true"',
        (b: false): $'default="false"',
        (a: {}): $'default="[]"',
        (a: [(:s), ...]): $'default="${default.a >> .s}"',
        _: $'default="${default}"'
    } 
;

let isFirstLetterUppercase = \str
    let letter = str where .@ = 0;
    //str.upper(letter) = letter
;

let util = (
    : prettyAnnotations,
    : transformType,
    : getAnnotationS,
    : getTypeName,
    : getDefaultVal,
    : combineTypes,
);
util
