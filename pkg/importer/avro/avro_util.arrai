# Utilities

# Transforms Avro primitive types to Sysl ones.
let transformPrimitiveType = \type
    cond type {
        'null': 'null',
        'boolean': 'bool',
        'int': 'int32',
        'long': 'int64',
        'float': 'float32',
        'double': 'float64',
        'bytes': 'bytes',
        'string': 'string',
        _: 'NonPrimitiveType'              
    }
;

let transformLogicalTypes = \type
    cond type('logicalType').s {
        'decimal': $`decimal(${type('precision')}.${type('scale')})`,
        'uuid': 'string',
        'date': 'date',
        'time-millis': 'int32',
        'time-micros': 'int64',
        'timestamp-millis': 'datetime',
        'timestamp-micros': 'datetime',
        'local-timestamp-millis': 'datetime',
        'local-timestamp-micros': 'datetime',
        'duration': 'bytes',
        _: 'NonLogicalType'  
    }
;

let isFirstLetterUppercase = \str
    let fLetter = str where .@ = 0;
    //str.upper(fLetter) = fLetter
;

# TODO: Check if it is sysl keywords with isValidIdentifier in /pkg/arrai/util.arrai.
# Now there is an issue in /pkg/arrai/concat_go.arrai which can't import /pkg/arrai/util.arrai 
# to the final arrai Go file.
let shouldCorrectName = \name    
    cond transformPrimitiveType(name) {
        'NonPrimitiveType': # Doesn't capitalize first letter if it is primitive type.
                !(//seq.has_prefix('set of', name) || //seq.has_prefix('sequence of', name)) 
                    && !isFirstLetterUppercase(name)
        ,
    }
;

let getAnnotationS = \item \name
    let annotation = cond item {
        (:s): s,
        _: item(name)?.s:'',
    };
    cond annotation {
        '': '',
        _: cond name {
            'name': cond {
                shouldCorrectName(annotation): $'name="${annotation}"',
                _: ''
            },
            'doc': $`description="${annotation}"`, 
            _: $`${name}="${annotation}"`,
        }
    }
;

# Returns a string representation of an annotation array of the form:
# [union=['string', 'null'], description="Relationship end date", default="null"].
let prettyAnnotations = \annotationArray
    let str = $`${annotationArray where .@item rank (:.@)::, }`;
    str && $`[${str}]`
;

let correctName = \name
    let type = transformPrimitiveType(name);
    cond type {
        'NonPrimitiveType': # Doesn't capitalize first letter if it is primitive type.
            cond {
                //seq.has_prefix('set of', name) || //seq.has_prefix('sequence of', name): name,
                _: //str.title(name),
            },
        _: type
    }
;

# Get type name from types which looks like:
# ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
# param t is type.
let getTypeName = \t
    cond t {
        (:s): 
            (s: correctName(s), type_S: correctName(s)),
        {'type': _, 'items': items, ...}:
            cond items {
                (:s):
                    let name = correctName(s); (s: $`${name}Sequence`, type_S: $`sequence of ${name}`),
                {'type': _, 'name': (s: initName), ...}:
                    let name = correctName(initName); (s: $`${name}Sequence`, type_S: $`sequence of ${name}`),
            },
        {'type': _, 'values': values, ...}:
            cond values {
                (:s):
                    let name = correctName(s); (s: $`String${//str.title(name)}Item`, type_S: $`set of String${//str.title(name)}Item`),
                {'type': _, 'name': (s: initName), ...}:
                    let name = correctName(initName); (s: $`String${name}Item`, type_S: $`set of String${name}Item`),
            },
        {'type': _, 'name': (:s), ...}: # This pattern matching must be in the end. 
            (s: correctName(s), type_S: correctName(s)),
    }
;

# Produces combined types, for example "type": ["int", "string", "null"],
# it will be processed to final type `Int32String?`.
let combineTypes = \types \handler
    let fullTypeNames = types >> getTypeName(.);
    let types = fullTypeNames >> .s;
    cond {
        //seq.contains(['null'], types):
            let typeNames = fullTypeNames where .@item.s != 'null' rank (:.@);
            cond types count {
                2: //seq.concat(typeNames >> handler(.)) + '?', # ['string', 'null'] -> string? .
                _: //seq.concat(typeNames => //str.title(.@item.s) orderby .) + '?' # ['string', 'null', 'int'] -> IntString? .
            }
        ,
        _:
            cond types count {
                1: $`${//str.title(//seq.concat(types))}Item`, # ['string'] -> StringItem .   
                _: //seq.concat(types => //str.title(.@item) orderby .), # ['string', 'int'] -> IntString .
            } 
    }
;

let transformType = \type
    cond type {
        # (s: 'string') etc.
        (s: typeName):
            cond correctName(typeName) {
                'null': 'string[~null]',
                name: name,
            },
        (a: typeArray):
            # Type can be ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
            # [(s: 'null'), (s: 'string')] to ['null', 'string'].
            combineTypes(typeArray, \type cond type {(:type_S, ...): type_S, _: type.s}),
        {'logicalType': logicalTypeName, 'type': typeName, ...}: # Must be before {'type': typeName, ...}.
            transformLogicalTypes(type), 
        {'type': typeName, ...}:
            # It is array, map.
            cond typeName.s {
                'array': 
                    'sequence of ' + cond type('items') {
                                        {'name': (:s), ...}: correctName(s), 
                                        (:s): correctName(s),
                                    },
                'map': 
                    'set of ' + cond type('values') {
                                    {'name': (:s), ...}: 'String' + correctName(s) + 'Item', 
                                    (:s): 'String' + //str.title(s) + 'Item', # Primitive.
                                },
                _: correctName(type('name').s)
            },
    }
;

let defaultVal = \item
    let default = item('default')?:''; 
    cond default {
        '': cond item {
                {'type': {'type': (s: 'map'), ...}, ...}: 'default="{}"', # Map's default value is {}.
                _: '',
            },
        ():'default="null"', 
        (b: true): $`default="true"`,
        (b: false): $`default="false"`,
        (a: {}): $`default="[]"`,
        (a: [(:s), ...]): $`default="${default.a >> .s}"`,
        {...}: $`default="${default >> .s}"`,
        (:s): $`default="${s}"`,
        _: $`default="${default}"`,
    } 
;

(
    :prettyAnnotations,
    :transformType,
    :getAnnotationS,
    :getTypeName,
    :defaultVal,
    :combineTypes,
    :correctName,
)
