let (
    emptyModel: empty,
    :parseDdl,

    :applyStmt,
    :applyCreateTable,
    :applyCreateIndex,
    :applyCreateDatabase,
    :applyAlterTable,
    :applyDropTable,
    :applyDropIndex,
    ...
) = //{./spanner};

let [createTable] = parseDdl('CREATE TABLE foo (a INT64) PRIMARY KEY (a);');
let foo = applyCreateTable(createTable.data, empty);

let [addCol] = parseDdl('ALTER TABLE foo ADD COLUMN b INT64;');
let foo_b = applyAlterTable(addCol.data, foo);

let [alterCol] = parseDdl('ALTER TABLE foo ALTER COLUMN b INT64 NOT NULL;');
let foo_b2 = applyAlterTable(alterCol.data, foo_b);

let [dropCol] = parseDdl('ALTER TABLE foo DROP COLUMN b;');
let foo_bx = applyAlterTable(dropCol.data, foo_b2);

let [addIndex] = parseDdl('CREATE INDEX i ON foo (a DESC);');
let foo_i = applyCreateIndex(addIndex.data, foo_bx);

let [updateTable] = parseDdl('UPDATE foo SET a = 1 WHERE a >= 1;');

let dropIndexSql = 'DROP INDEX i;';
let [dropIndex] = parseDdl(dropIndexSql);
let foo_ix = applyDropIndex(dropIndex.data, foo_i);

let interleaved = applyStmt(parseDdl('
    CREATE DATABASE test;
    CREATE TABLE foo (a INT64) PRIMARY KEY (a);
    CREATE TABLE bar (a INT64, b INT64) PRIMARY KEY (a, b), INTERLEAVE IN PARENT foo;
'), empty);

(
    parseDdl: (
        createTable: true, # TODO
        addCol: addCol = (
            stmt: 'alter_table',
            data: (
                table_name: 'foo',
                alterations: [(
                    type: 'add_column',
                    alteration: (name: 'b', type: 'int', nullable: true, options: {}, array: {}, length: 0, scale: {}),
                )],
            ),
        ),
        dropCol: dropCol = (
            stmt: 'alter_table',
            data: (
                table_name: 'foo',
                alterations: [(
                    type: 'drop_column',
                    alteration: (name: 'b'),
                )],
            ),
        ),
        alterCol: alterCol = (
            stmt: 'alter_table',
            data: (
                table_name: 'foo',
                alterations: [(
                    type: 'alter_column',
                    alteration: (name: 'b', type: 'int', nullable: false, options: {}, array: {}, length: 0, scale: {}),
                )],
            ),
        ),
        dropCol: dropCol = (
            stmt: 'alter_table',
            data: (
                table_name: 'foo',
                alterations: [(
                    type: 'drop_column',
                    alteration: (name: 'b'),
                )],
            )
        ),
        dropIndex: dropIndex = (
            stmt: 'drop_index',
            data: 'i',
        ),
        commentOnly: parseDdl("-- Foo\n--bar") = {},
        commentWrapped: parseDdl($`
            -- Foo
            --bar
            ${dropIndexSql}
            --Baz
        `) = [dropIndex],
        commentInline: parseDdl($`
            DROP --a
            INDEX --b
            i --c;
        `) = [dropIndex],

        updateTable: updateTable = {},
    ),

    applyCreateTable: (
        foo: foo.entities = {(
            name: 'foo',
            attributes: [
                (array: {}, length: 0, name: 'a', nullable: true, options: {}, type: 'int', scale: {}),
            ],
            primary_key: ['a'],
            foreign_keys: {},
            cluster: {},
        )}
    ),

    applyCreateIndex: (
        foo_i: foo_i.indexes = {(
            name: 'i',
            table_name: 'foo',
            key_part: ['a(desc)'],
            unique: {},
            nullfiltered: {},
            storing_col: {},
            interleaved_table: {},
        )}
    ),

    applyDropIndex: (
        foo: foo.indexes = {}
    ),

    applyAlterTable: (
        addCol: foo_b.entities = {(
            name: 'foo',
            attributes: [
                (name: 'a', type: 'int', nullable: true, options: {}, array: {}, length: 0, scale: {}),
                (name: 'b', type: 'int', nullable: true, options: {}, array: {}, length: 0, scale: {}),
            ],
            primary_key: ['a'],
            foreign_keys: {},
            cluster: {},
        )},

        alterCol: foo_b2.entities = {(
            name: 'foo',
            attributes: [
                (name: 'a', type: 'int', nullable: true, options: {}, array: {}, length: 0, scale: {}),
                (name: 'b', type: 'int', nullable: false, options: {}, array: {}, length: 0, scale: {}),
            ],
            primary_key: ['a'],
            foreign_keys: {},
            cluster: {},
        )},

        dropCol: foo_bx = foo,
    ),

    applyStmt: (
        interleaved: interleaved = (
            entities: {
                (
                    name: 'foo',
                    attributes: [(array: {}, length: 0, name: 'a', nullable: true, options: {}, scale: {}, type: 'int')],
                    cluster: {},
                    foreign_keys: {},
                    primary_key: ['a'],
                ),
                (
                    name: 'bar',
                    attributes: [
                        (array: {}, length: 0, name: 'a', nullable: true, options: {}, scale: {}, type: 'int'),
                        (array: {}, length: 0, name: 'b', nullable: true, options: {}, scale: {}, type: 'int'),
                    ],
                    cluster: [(interleaved_in: 'foo', on_delete: {})],
                    foreign_keys: {},
                    primary_key: ['a', 'b'],
                ),
            },
            indexes: {},
            schema: {(name: 'test')},
        ),
    ),
)
