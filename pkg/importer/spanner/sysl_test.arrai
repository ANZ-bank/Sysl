let (:transformModel, ...) = //{./sysl};

let interleaved = (
    entities: {(
        name: 'foo',
        attributes: [(array: {}, length: 0, name: 'a', nullable: true, options: {}, scale: {}, type: 'int')],
        primary_key: ['a'],
        cluster: [],
        foreign_keys: {},
    ), (
        name: 'bar',
        attributes: [
            (array: {}, length: 0, name: 'a', nullable: true, options: {}, scale: {}, type: 'int'),
            (array: {}, length: 0, name: 'b', nullable: false, options: {}, scale: {}, type: 'int'),
        ],
        cluster: [(interleaved_in: 'foo', on_delete: {})],
        primary_key: ['a', 'b'],
        foreign_keys: {},
    )},
    indexes: {},
    schema: {(name: 'test')},
);

(
    transformModel: (
        interleaved: transformModel(interleaved, '') = $`
        # Code generated by Sysl. DO NOT EDIT.

        test:
            !table bar [interleave_in_parent="foo", interleave_on_delete=""]:
                a <: foo.a? [~pk]
                b <: int [~pk]

            !table foo:
                a <: int? [~pk]

        `,
    )
)
