let (:transformModel, ...) = //{./sysl};

let interleaved = (
    entities: {(
        name: 'foo',
        attributes: [
            (name: 'a', array: {}, length: 0, nullable: true, options: {}, scale: {}, type: 'int'),
            (name: 'b', array: {}, length: 0, nullable: true, options: {}, scale: {}, type: 'int'),
        ],
        primary_key: ['a'],
        cluster: [],
        foreign_keys: {},
    ), (
        name: 'bar',
        attributes: [
            (name: 'a', array: {}, length: 0, nullable: true, options: {}, scale: {}, type: 'int'),
            (name: 'b', array: {}, length: 0, nullable: false, options: {}, scale: {}, type: 'int'),
            (name: 'c', array: {}, length: 0, nullable: false, scale: {}, type: 'datetime',
                options: {'allow_commit_timestamp': 'true', 'foo': 'bar'}),
        ],
        cluster: [(interleaved_in: 'foo', on_delete: {})],
        primary_key: ['a', 'b'],
        foreign_keys: {},
    )},
    indexes: {},
    schema: {(name: 'test')},
);

(
    transformModel: (
        interleaved: transformModel(interleaved) = $`
        # Code generated by Sysl. DO NOT EDIT.

        test:
            !table bar [interleave_in_parent="foo", interleave_on_delete=""]:
                a <: foo.a? [~pk]
                b <: int [~pk]
                c <: datetime [allow_commit_timestamp="true", foo="bar"]

            !table foo:
                a <: int? [~pk]
                b <: int?

        `,
    )
)
